---@meta

---Prototype of an entity.
---@class LuaEntityPrototype
---@field additional_pastable_entities LuaEntityPrototype[] @Entities this entity can be pasted onto in addition to the normal allowed ones.`[R]`
---@field adjacent_tile_collision_box BoundingBox @The bounding box that specifies which tiles adjacent to the offshore pump should be checked.`[R]`
---@field adjacent_tile_collision_mask CollisionMask @Tiles adjacent to the offshore pump must not collide with this collision mask.`[R]`
---@field adjacent_tile_collision_test CollisionMask @If this mask is not empty, tiles adjacent to the offshore pump must not collide with this collision mask.`[R]`
---@field affected_by_tiles boolean @Whether this unit prototype is affected by tile walking speed modifiers or `nil`.`[R]`
---@field air_resistance double @The air resistance of this rolling stock prototype or `nil` if not a rolling stock prototype.`[R]`
---@field alert_icon_shift Vector @The alert icon shift of this entity prototype.`[R]`
---@field alert_when_attacking boolean @Does this turret prototype alert when attacking? or `nil` if not turret prototype.`[R]`
---@field alert_when_damaged boolean @Does this entity with health prototype alert when damaged? or `nil` if not entity with health prototype.`[R]`
---@field allow_access_to_all_forces boolean @If this market allows access to all forces or just friendly ones.`[R]`
---@field allow_burner_leech boolean @If this inserter allows burner leeching.`[R]`
---@field allow_copy_paste boolean @When false copy-paste is not allowed for this entity.`[R]`
---@field allow_custom_vectors boolean @If this inserter allows custom pickup and drop vectors.`[R]`
---@field allow_passengers boolean @If this vehicle allows passengers.`[R]`
---@field allow_run_time_change_of_is_military_target boolean @True if this entity-with-owner's is_military_target can be changed run-time (on the entity, not on the prototype itself)`[R]`
---@field allowed_effects table<string, boolean> @The allowed module effects for this entity or `nil`.`[R]`
---@field always_on boolean @Whether the lamp is always on (except when out of power or turned off by the circuit network) or `nil`.`[R]`
---@field animation_speed_coefficient double @Gets the animation speed coefficient of this belt . `nil` if this is not transport belt connectable.`[R]`
---@field attack_parameters AttackParameters @The attack parameters for this entity or `nil` if the entity doesn't use attack parameters.`[R]`
---@field attack_result TriggerItem[] @The attack result of this entity if the entity has one, else `nil`.`[R]`
---@field automated_ammo_count uint @The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret or `nil`.`[R]`
---@field automatic_weapon_cycling boolean @Does this prototoype automaticly cycle weapons. `nil` if this is not a spider vechicle.`[R]`
---@field autoplace_specification AutoplaceSpecification @Autoplace specification for this entity prototype. `nil` if none.`[R]`
---@field base_productivity double @The base productivity of this crafting machine, lab, or mining drill, or `nil`.`[R]`
---@field belt_distance double @`[R]`
---@field belt_length double @`[R]`
---@field belt_speed double @The speed of this transport belt or `nil` if this isn't a transport belt related prototype.`[R]`
---@field braking_force double @The braking force of this vehicle prototype or `nil` if not a vehicle prototype.`[R]`
---@field build_base_evolution_requirement double @The evolution requirement to build this entity as a base when expanding enemy bases.`[R]`
---@field build_distance uint @`[R]`
---@field building_grid_bit_shift uint @The log2 of grid size of the building`[R]`
---@field burner_prototype LuaBurnerPrototype @The burner energy source prototype this entity uses or `nil`.`[R]`
---@field burns_fluid boolean @If this generator prototype burns fluid.`[R]`
---@field call_for_help_radius double @`[R]`
---@field can_open_gates boolean @Whether this unit prototype can open gates or `nil`.`[R]`
---@field center_collision_mask CollisionMask @The collision mask used only for collision test with tile directly at offshore pump position.`[R]`
---@field chain_shooting_cooldown_modifier double @Gets the chain shooting cooldown modifier of this prototype. `nil` if this is not a spider vechicle.`[R]`
---@field character_corpse LuaEntityPrototype @`[R]`
---@field chunk_exploration_radius double @Gets the chunk exploration radius of this prototype. `nil` if this is not a spider vechicle.`[R]`
---@field cliff_explosive_prototype string @The item prototype name used to destroy this cliff or `nil`.`[R]`
---@field collision_box BoundingBox @The bounding box used for collision checking.`[R]`
---@field collision_mask CollisionMask @The collision masks this entity uses`[R]`
---@field collision_mask_collides_with_self boolean @Does this prototype collision mask collide with itself?`[R]`
---@field collision_mask_collides_with_tiles_only boolean @Does this prototype collision mask collide with tiles only?`[R]`
---@field collision_mask_considers_tile_transitions boolean @Does this prototype collision mask consider tile transitions?`[R]`
---@field collision_mask_with_flags CollisionMaskWithFlags @`[R]`
---@field color Color @The color of the prototype, or `nil` if the prototype doesn't have color.`[R]`
---@field construction_radius double @The construction radius for this roboport prototype or `nil`.`[R]`
---@field consumption double @The energy consumption of this car prototype or `nil` if not a car prototype.`[R]`
---@field container_distance double @`[R]`
---@field corpses table<string, LuaEntityPrototype> @Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype name.`[R]`
---@field count_as_rock_for_filtered_deconstruction boolean @If this simple-entity is counted as a rock for the deconstruction planner "trees and rocks only" filter.`[R]`
---The crafting categories this entity supports. Only meaningful when this is a crafting-machine or player entity type.`[R]`
---
---The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.
---@field crafting_categories table<string, boolean>
---@field crafting_speed double @The crafting speed of this crafting-machine or `nil`.`[R]`
---If this prototype will attempt to create a ghost of itself on death.`[R]`
---
---If this is false then a ghost will never be made, if it's true a ghost may be made.
---@field create_ghost_on_death boolean
---@field created_effect TriggerItem[] @The trigger run when this entity is created or `nil`.`[R]`
---@field created_smoke LuaEntityPrototype.created_smoke @The smoke trigger run when this entity is built or `nil`.`[R]`
---@field damage_hit_tint Color @`[R]`
---@field darkness_for_all_lamps_off float @Value between 0 and 1 darkness where all lamps of this lamp prototype are off or `nil`.`[R]`
---@field darkness_for_all_lamps_on float @Value between 0 and 1 darkness where all lamps of this lamp prototype are on or `nil`.`[R]`
---@field default_collision_mask_with_flags CollisionMaskWithFlags @The hardcoded default collision mask (with flags) for this entity prototype type.`[R]`
---@field destroy_non_fuel_fluid boolean @If this generator prototype destroys non fuel fluids.`[R]`
---@field distraction_cooldown uint @The distraction cooldown of this unit prototype or `nil`.`[R]`
---@field distribution_effectivity double @The distribution effectivity for this beacon prototype or `nil` if not a beacon prototype.`[R]`
---@field door_opening_speed double @The door opening speed for this rocket silo prototype or `nil`.`[R]`
---@field draw_cargo boolean @Whether this logistics or construction robot renders its cargo when flying or `nil`.`[R]`
---@field drawing_box BoundingBox @The bounding box used for drawing the entity icon.`[R]`
---@field drop_item_distance uint @`[R]`
---@field dying_speed float @The dying time of this corpse prototype. `nil` if not a corpse prototype.`[R]`
---@field effectivity double @The effectivity of this car prototype, generator prototype or `nil`.`[R]`
---@field electric_energy_source_prototype LuaElectricEnergySourcePrototype @The electric energy source prototype this entity uses or `nil`.`[R]`
---@field emissions_per_second double @Amount of pollution emissions per second this entity will create.`[R]`
---@field enemy_map_color Color @The enemy map color used when charting this entity.`[R]`
---@field energy_per_hit_point double @The energy used per hitpoint taken for this vehicle during collisions or `nil`.`[R]`
---@field energy_per_move double @The energy consumed per tile moved for this flying robot or `nil`.`[R]`
---@field energy_per_tick double @The energy consumed per tick for this flying robot or `nil`.`[R]`
---@field energy_usage double @The direct energy usage of this entity or `nil` if this entity doesn't have a direct energy usage.`[R]`
---@field engine_starting_speed double @The engine starting speed for this rocket silo rocket prototype or `nil`.`[R]`
---@field enter_vehicle_distance double @`[R]`
---@field explosion_beam double @Does this explosion have a beam or `nil` if not an explosion prototype.`[R]`
---@field explosion_rotate double @Does this explosion rotate or `nil` if not an explosion prototype.`[R]`
---@field fast_replaceable_group string @The group of mutually fast-replaceable entities. Possibly `nil`.`[R]`
---@field filter_count uint @The filter count of this inserter, loader, or logistic chest or `nil`. For logistic containers, `nil` means no limit.`[R]`
---@field final_attack_result TriggerItem[] @The final attack result for projectiles `nil` if not a projectile`[R]`
---@field fixed_recipe string @The fixed recipe name for this assembling machine prototype or `nil`.`[R]`
---@field flags EntityPrototypeFlags @The flags for this entity prototype.`[R]`
---@field fluid LuaFluidPrototype @The fluid this offshore pump produces or `nil`.`[R]`
---The fluid capacity of this entity or 0 if this entity doesn't support fluids.`[R]`
---
---Crafting machines will report 0 due to their fluid capacity being what ever a given recipe needs.
---@field fluid_capacity double
---@field fluid_energy_source_prototype LuaFluidEnergySourcePrototype @The fluid energy source prototype this entity uses or `nil`.`[R]`
---@field fluid_usage_per_tick double @The fluid usage of this generator prototype or `nil`.`[R]`
---@field fluidbox_prototypes LuaFluidBoxPrototype[] @The fluidbox prototypes for this entity.`[R]`
---@field flying_acceleration double @The flying acceleration for this rocket silo rocket prototype or `nil`.`[R]`
---@field flying_speed double @The flying speed for this rocket silo rocket prototype or `nil`.`[R]`
---@field friction_force double @The friction of this vehicle prototype or `nil` if not a vehicle prototype.`[R]`
---@field friendly_map_color Color @The friendly map color used when charting this entity.`[R]`
---@field grid_prototype LuaEquipmentGridPrototype @The equipment grid prototype for this entity or `nil`.`[R]`
---@field group LuaGroup @Group of this entity.`[R]`
---@field guns table<string, LuaItemPrototype> @A mapping of the gun name to the gun prototype this prototype uses, or `nil`.`[R]`
---@field has_belt_immunity boolean @Whether this unit, car, or character prototype has belt immunity, `nil` if not car, unit, or character prototype.`[R]`
---@field healing_per_tick float @Amount this entity can heal per tick.`[R]`
---@field heat_buffer_prototype LuaHeatBufferPrototype @The heat buffer prototype this entity uses or `nil`.`[R]`
---@field heat_energy_source_prototype LuaHeatEnergySourcePrototype @The heat energy source prototype this entity uses or `nil`.`[R]`
---@field height double @Gets the height of this prototype. `nil` if this is not a spider vechicle.`[R]`
---@field indexed_guns LuaItemPrototype[] @A vector of the gun prototypes this prototype uses, or `nil`.`[R]`
---@field infinite_depletion_resource_amount uint @Every time this infinite resource 'ticks' down it is reduced by this amount. `nil` when not a resource. Meaningless if this isn't an infinite type resource.`[R]`
---@field infinite_resource boolean @Is this resource infinite? Will be `nil` when used on a non-resource.`[R]`
---@field ingredient_count uint @The max number of ingredients this crafting-machine prototype supports or `nil` if this isn't a crafting-machine prototype.`[R]`
---@field inserter_chases_belt_items boolean @True if this inserter chases items on belts for pickup or `nil`.`[R]`
---@field inserter_drop_position Vector @The drop position for this inserter or `nil`.`[R]`
---@field inserter_extension_speed double @The extension speed of this inserter or `nil`.`[R]`
---@field inserter_pickup_position Vector @The pickup position for this inserter or `nil`.`[R]`
---@field inserter_rotation_speed double @The rotation speed of this inserter or `nil`.`[R]`
---@field inserter_stack_size_bonus double @Gets the built-in stack size bonus of this inserter prototype. `nil` if this is not an inserter.`[R]`
---@field instruments ProgrammableSpeakerInstrument[] @The instruments for this programmable speaker or `nil`.`[R]`
---@field is_building boolean @`[R]`
---@field is_entity_with_owner boolean @True if this is entity-with-owner`[R]`
---@field is_military_target boolean @True if this entity-with-owner is military target`[R]`
---@field item_pickup_distance double @`[R]`
---@field item_slot_count uint @The item slot count of this constant combinator prototype or `nil`.`[R]`
---@field items_to_place_this SimpleItemStack[] @Items that, when placed, will produce this entity. It is an array of items, or `nil` if no items place this entity. Construction bots will always choose the first item in this list to build this entity.`[R]`
---@field lab_inputs string[] @The item prototype names that are the inputs of this lab prototype or `nil`.`[R]`
---@field launch_wait_time uint8 @The rocket launch delay for this rocket silo prototype or `nil`.`[R]`
---@field light_blinking_speed double @The light blinking speed for this rocket silo prototype or `nil`.`[R]`
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---@field logistic_mode string @The logistic mode of this logistic container or `nil` if this isn't a logistic container prototype. One of `"requester"`, `"active-provider"`, `"passive-provider"`, `"buffer"`, `"storage"`, `"none"`.`[R]`
---The logistic parameters for this roboport. or `nil`.`[R]`
---
---Both the `charging_station_shift` and `stationing_offset` vectors are tables with `x` and `y` keys instead of an array.
---@field logistic_parameters LuaEntityPrototype.logistic_parameters
---@field logistic_radius double @The logistic radius for this roboport prototype or `nil`.`[R]`
---@field loot Loot[] @Loot that will be dropped when this entity is killed. `nil` if there is no loot.`[R]`
---@field loot_pickup_distance double @`[R]`
---Get the manual range modifier for artillery turret and artillery wagon prototypes. `nil` if not artillery type prototype
---
---subclass(ArtilleryWagon, ArtilleryTurret)`[R]`
---@field manual_range_modifier double
---@field map_color Color @The map color used when charting this entity if a friendly or enemy color isn't defined or `nil`.`[R]`
---@field map_generator_bounding_box BoundingBox @The bounding box used for map generator collision checking.`[R]`
---@field max_circuit_wire_distance double @The maximum circuit wire distance for this entity. 0 when the entity doesn't support circuit wires.`[R]`
---@field max_count_of_owned_units double @Count of enemies this spawner can sustain.`[R]`
---@field max_darkness_to_spawn float @The maximum darkness at which this unit spawner can spawn entities.`[R]`
---@field max_distance_of_nearby_sector_revealed uint @The radius of the area constantly revealed by this radar, in chunks.`[R]`
---@field max_distance_of_sector_revealed uint @The radius of the area this radar can chart, in chunks.`[R]`
---@field max_energy double @The max energy for this flying robot or `nil`.`[R]`
---@field max_energy_production double @The theoretical maximum energy production for this this entity.`[R]`
---@field max_energy_usage double @The theoretical maximum energy usage for this entity.`[R]`
---@field max_friends_around_to_spawn double @How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.`[R]`
---@field max_health float @Max health of this entity. Will be `0` if this is not an entity with health.`[R]`
---@field max_payload_size uint @The max payload size of this logistics or construction robot or `nil`.`[R]`
---@field max_polyphony uint @The maximum polyphony for this programmable speaker or `nil`.`[R]`
---@field max_power_output double @The default maximum power output of this generator prototype or `nil`.`[R]`
---@field max_pursue_distance double @The maximum pursue distance of this unit prototype or `nil`.`[R]`
---@field max_speed double @The max speed of this projectile prototype or flying robot prototype or `nil`.`[R]`
---@field max_to_charge float @The maximum energy for this flying robot above which it won't try to recharge when stationing or `nil`.`[R]`
---@field max_underground_distance uint8 @The max underground distance for underground belts and underground pipes or `nil` if this isn't one of those prototypes.`[R]`
---@field max_wire_distance double @The maximum wire distance for this entity. 0 when the entity doesn't support wires.`[R]`
---@field maximum_corner_sliding_distance double @`[R]`
---@field maximum_temperature double @The maximum fluid temperature of this generator prototype or `nil`.`[R]`
---@field min_darkness_to_spawn float @The minimum darkness at which this unit spawner can spawn entities.`[R]`
---@field min_pursue_time uint @The minimum pursue time of this unit prototype or `nil`.`[R]`
---@field min_to_charge float @The minimum energy for this flying robot before it tries to recharge or `nil`.`[R]`
---@field mineable_properties LuaEntityPrototype.mineable_properties @Whether this entity is minable and what can be obtained by mining it.`[R]`
---@field minimum_resource_amount uint @Minimum amount of this resource. Will be `nil` when used on a non-resource.`[R]`
---@field mining_drill_radius double @The mining radius of this mining drill prototype or `nil` if this isn't a mining drill prototype.`[R]`
---@field mining_speed double @The mining speed of this mining drill/character prototype or `nil`.`[R]`
---@field module_inventory_size uint @The module inventory size or `nil` if this entity doesn't support modules.`[R]`
---@field move_while_shooting boolean @Whether this unit prototype can move while shooting or `nil`.`[R]`
---@field name string @Name of this prototype.`[R]`
---@field neighbour_bonus double @`[R]`
---@field next_upgrade LuaEntityPrototype @The next upgrade for this entity or `nil`.`[R]`
---@field normal_resource_amount uint @The normal amount for this resource. `nil` when not a resource.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field pollution_to_join_attack float @The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution. `nil` when prototype is not a unit prototype.`[R]`
---@field protected_from_tile_building boolean @True if this entity prototype should be included during tile collision checks with [LuaTilePrototype::check_collision_with_entities](LuaTilePrototype::check_collision_with_entities) enabled.`[R]`
---@field pumping_speed double @The pumping speed of this offshore pump, normal pump, or `nil`.`[R]`
---@field radar_range uint @The radar range of this unit prototype or `nil`.`[R]`
---@field radius double @The radius of this entity prototype.`[R]`
---@field reach_distance uint @`[R]`
---@field reach_resource_distance double @`[R]`
---@field related_underground_belt LuaEntityPrototype @`[R]`
---@field remains_when_mined LuaEntityPrototype[] @The remains left behind when this entity is mined.`[R]`
---@field remove_decoratives string @`[R]`
---@field repair_speed_modifier uint @Repair-speed modifier for this entity. Actual repair speed will be `tool_repair_speed * entity_repair_speed_modifier`. May be `nil`.`[R]`
---@field researching_speed double @The base researching speed of this lab prototype or `nil`.`[R]`
---@field resistances table<string, Resistance> @List of resistances towards each damage type. It is a dictionary indexed by damage type names (see `data/base/prototypes/damage-type.lua`).`[R]`
---The resource categories this character or mining drill supports, or `nil` if not a character or mining dill.`[R]`
---
---The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup.
---@field resource_categories table<string, boolean>
---Name of the category of this resource or `nil` when not a resource.`[R]`
---
---During data stage this property is named "category".
---@field resource_category string
---@field respawn_time uint @`[R]`
---@field result_units UnitSpawnDefinition[] @The result units and spawn points with weight and evolution factor for a biter spawner entity.`[R]`
---@field rising_speed double @The rising speed for this rocket silo rocket prototype or `nil`.`[R]`
---@field rocket_entity_prototype LuaEntityPrototype @The rocket entity prototype associated with this rocket silo prototype or `nil`.`[R]`
---@field rocket_parts_required uint @The rocket parts required for this rocket silo prototype or `nil`.`[R]`
---@field rocket_rising_delay uint8 @The rocket rising delay for this rocket silo prototype or `nil`.`[R]`
---@field rotation_speed double @The rotation speed of this car prototype or `nil` if not a car prototype.`[R]`
---@field running_speed double @Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.`[R]`
---@field scale_fluid_usage boolean @If this generator prototype scales fluid usage.`[R]`
---@field secondary_collision_box BoundingBox @The secondary bounding box used for collision checking, or `nil` if it doesn't have one. This is only used in rails and rail remnants.`[R]`
---@field selectable_in_game boolean @Is this entity selectable?`[R]`
---@field selection_box BoundingBox @The bounding box used for drawing selection.`[R]`
---@field selection_priority uint @The selection priority of this entity - a value between 0 and 255`[R]`
---@field shooting_cursor_size double @The cursor size used when shooting at this entity.`[R]`
---@field spawn_cooldown LuaEntityPrototype.spawn_cooldown @The spawning cooldown for this enemy spawner prototype or `nil`.`[R]`
---@field spawning_radius double @How far from the spawner can the units be spawned.`[R]`
---@field spawning_spacing double @What spaces should be between the spawned units.`[R]`
---@field spawning_time_modifier double @The spawning time modifier of this unit prototype or `nil`.`[R]`
---The default speed of this flying robot, rolling stock or unit, `nil` if not one of these.`[R]`
---
---For rolling stocks, this is their `max_speed`.
---@field speed double
---@field speed_multiplier_when_out_of_energy float @The speed multiplier when this flying robot is out of energy or `nil`.`[R]`
---@field stack boolean @If this inserter is a stack-type.`[R]`
---@field sticker_box BoundingBox @The bounding box used to attach sticker type entities.`[R]`
---@field subgroup LuaGroup @Subgroup of this entity.`[R]`
---@field supply_area_distance double @The supply area of this electric pole, beacon, or `nil` if this is neither.`[R]`
---@field supports_direction boolean @If this entity prototype could possibly ever be rotated.`[R]`
---@field tank_driving boolean @If this car prototype uses tank controls to drive or `nil` if this is not a car prototype.`[R]`
---@field target_temperature double @The target temperature of this boiler prototype or `nil`.`[R]`
---@field terrain_friction_modifier float @The terrain friction modifier for this vehicle.`[R]`
---@field ticks_to_keep_aiming_direction uint @`[R]`
---@field ticks_to_keep_gun uint @`[R]`
---@field ticks_to_stay_in_combat uint @`[R]`
---@field time_to_live uint @The time to live for this prototype or `0` if prototype doesn't have time_to_live or time_before_removed.`[R]`
---@field timeout uint @The time it takes this land mine to arm.`[R]`
---@field torso_rotation_speed double @Gets the torso rotation speed of this prototype. `nil` if this is not a spider vechicle.`[R]`
---@field tree_color_count uint8 @If it is a tree, return the number of colors it supports. `nil` otherwise.`[R]`
---@field trigger_collision_mask CollisionMaskWithFlags @Collision mask entity must collide with to make landmine blowup`[R]`
---@field turret_range uint @The range of this turret or `nil` if this isn't a turret related prototype.`[R]`
---@field turret_rotation_speed double @The turret rotation speed of this car prototype or `nil` if not a car prototype.`[R]`
---@field type string @Type of this prototype.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field vision_distance double @The vision distance of this unit prototype or `nil`.`[R]`
---@field void_energy_source_prototype LuaVoidEnergySourcePrototype @The void energy source prototype this entity uses or `nil`.`[R]`
---@field weight double @The weight of this vehicle prototype or `nil` if not a vehicle prototype.`[R]`
local LuaEntityPrototype = {}

---Gets the base size of the given inventory on this entity or `nil` if the given inventory doesn't exist.
---@param _index defines.inventory
---@return uint
function LuaEntityPrototype.get_inventory_size(_index) end

---Test whether this entity prototype has a certain flag set.
---@param _flag string @The flag to test. See [EntityPrototypeFlags](EntityPrototypeFlags) for a list of flags.
---@return boolean @`true` if this prototype has the given flag set.
function LuaEntityPrototype.has_flag(_flag) end

---All methods and properties that this object supports.
---@return string
function LuaEntityPrototype.help() end


---@class LuaEntityPrototype.created_smoke
---@field initial_height float
---@field max_radius? float
---@field offset_deviation BoundingBox
---@field offsets Vector[]
---@field smoke_name string
---@field speed Vector
---@field speed_from_center float
---@field speed_from_center_deviation float
---@field speed_multiplier float
---@field speed_multiplier_deviation float
---@field starting_frame float
---@field starting_frame_deviation float
---@field starting_frame_speed float
---@field starting_frame_speed_deviation float

---@class LuaEntityPrototype.logistic_parameters
---@field charge_approach_distance float
---@field charging_distance float
---@field charging_energy double
---@field charging_station_count uint
---@field charging_station_shift Vector
---@field charging_threshold_distance float
---@field construction_radius float
---@field logistic_radius float
---@field logistics_connection_distance float
---@field robot_limit uint
---@field robot_vertical_acceleration float
---@field robots_shrink_when_entering_and_exiting boolean
---@field spawn_and_station_height float
---@field spawn_and_station_shadow_height_offset float
---@field stationing_offset Vector

---@class LuaEntityPrototype.mineable_properties
---@field fluid_amount? double @The required fluid amount if any.
---@field minable boolean @Is this entity mineable at all?
---@field mining_particle? string @Prototype name of the particle produced when mining this entity. Will only be present if this entity produces any particle during mining.
---@field mining_time double @Energy required to mine an entity.
---@field mining_trigger? TriggerItem[] @The mining trigger if any.
---@field products? Product[] @Products obtained by mining this entity.
---@field required_fluid? string @The prototype name of the required fluid if any.

---@class LuaEntityPrototype.spawn_cooldown
---@field max double
---@field min double

