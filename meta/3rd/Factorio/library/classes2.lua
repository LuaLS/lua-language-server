---@meta

---An item in a [LuaEquipmentGrid](LuaEquipmentGrid), for example a fusion reactor placed in one's power armor.
---
---An equipment reference becomes invalid once the equipment is removed or the equipment grid it resides in is destroyed.
---@class LuaEquipment
---@field burner LuaBurner @The burner energy source for this equipment or `nil` if there isn't one.`[R]`
---@field energy double @Current available energy.`[RW]`
---@field generator_power double @Energy generated per tick.`[R]`
---@field max_energy double @Maximum amount of energy that can be stored in this equipment.`[R]`
---@field max_shield double @Maximum shield value.`[R]`
---@field max_solar_power double @Maximum solar power generated.`[R]`
---@field movement_bonus double @Movement speed bonus.`[R]`
---@field name string @Name of this equipment.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field position EquipmentPosition @Position of this equipment in the equipment grid.`[R]`
---@field prototype LuaEquipmentPrototype @`[R]`
---@field shape LuaEquipment.shape @Shape of this equipment.`[R]`
---Current shield value of the equipment.`[RW]`
---
---Can't be set higher than [LuaEquipment::max_shield](LuaEquipment::max_shield).
---@field shield double
---@field type string @Type of this equipment.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaEquipment = {}

---All methods and properties that this object supports.
---@return string
function LuaEquipment.help() end


---@class LuaEquipment.shape
---@field height uint
---@field width uint

---Prototype of an equipment category.
---@class LuaEquipmentCategoryPrototype
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaEquipmentCategoryPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaEquipmentCategoryPrototype.help() end

---An equipment grid is for example the inside of a power armor.
---@class LuaEquipmentGrid
---@field available_in_batteries double @The total energy stored in all batteries in the equipment grid.`[R]`
---@field battery_capacity double @Total energy storage capacity of all batteries in the equipment grid.`[R]`
---@field equipment LuaEquipment[] @All the equipment in this grid.`[R]`
---@field generator_energy double @Total energy per tick generated by the equipment inside this grid.`[R]`
---@field height uint @Height of the equipment grid.`[R]`
---@field inhibit_movement_bonus boolean @True if this movement bonus equipment is turned off, otherwise false.`[RW]`
---@field max_shield float @The maximum amount of shields this equipment grid has.`[R]`
---@field max_solar_energy double @Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated energy varies depending on the daylight levels.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field prototype LuaEquipmentGridPrototype @`[R]`
---@field shield float @The amount of shields this equipment grid has.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field width uint @Width of the equipment grid.`[R]`
local LuaEquipmentGrid = {}

---Check whether moving an equipment would succeed.
---@param _table LuaEquipmentGrid.can_move
---@return boolean
function LuaEquipmentGrid.can_move(_table) end

---Clear all equipment from the grid, removing it without actually returning it.
---@param _by_player? PlayerIdentification @If provided, the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.
function LuaEquipmentGrid.clear(_by_player) end

---Find equipment in the Equipment Grid based off a position.
---@param _position EquipmentPosition @The position
---@return LuaEquipment @The found equipment, or `nil` if equipment could not be found at the given position.
function LuaEquipmentGrid.get(_position) end

---Get counts of all equipment in this grid.
---@return table<string, uint> @The counts, indexed by equipment names.
function LuaEquipmentGrid.get_contents() end

---All methods and properties that this object supports.
---@return string
function LuaEquipmentGrid.help() end

---Move an equipment within this grid.
---@param _table LuaEquipmentGrid.move
---@return boolean @`true` if the equipment was successfully moved.
function LuaEquipmentGrid.move(_table) end

---Insert an equipment into the grid.
---@param _table LuaEquipmentGrid.put
---@return LuaEquipment @The newly-added equipment, or `nil` if the equipment could not be added.
function LuaEquipmentGrid.put(_table) end

---Remove an equipment from the grid.
---@param _table LuaEquipmentGrid.take
---@return SimpleItemStack @The removed equipment, or `nil` if no equipment was removed.
function LuaEquipmentGrid.take(_table) end

---Remove all equipment from the grid.
---@param _by_player? PlayerIdentification @If provided, the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.
---@return table<string, uint> @Count of each removed equipment, indexed by their prototype names.
function LuaEquipmentGrid.take_all(_by_player) end


---@class LuaEquipmentGrid.can_move
---@field equipment LuaEquipment @The equipment to move
---@field position EquipmentPosition @Where to put it

---@class LuaEquipmentGrid.move
---@field equipment LuaEquipment @The equipment to move
---@field position EquipmentPosition @Where to put it

---@class LuaEquipmentGrid.put
---@field name string @Equipment prototype name
---@field position? EquipmentPosition @Grid position to put the equipment in.
---@field by_player? PlayerIdentification @If provided the action is done 'as' this player and [on_player_placed_equipment](on_player_placed_equipment) is triggered.

---@class LuaEquipmentGrid.take
---@field position? EquipmentPosition @Take the equipment that contains this position in the grid.
---@field equipment? LuaEquipment @Take this exact equipment.
---@field by_player? PlayerIdentification @If provided the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.

---Prototype of an equipment grid.
---@class LuaEquipmentGridPrototype
---@field equipment_categories string[] @Equipment category names for the [categories](LuaEquipmentPrototype::equipment_categories) that may be inserted into this equipment grid. The grid will accept any equipment that has at least one category in this list.`[R]`
---@field height uint @`[R]`
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---@field locked boolean @If the player can move equipment into or out of this grid.`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field width uint @`[R]`
local LuaEquipmentGridPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaEquipmentGridPrototype.help() end

---Prototype of a modular equipment.
---@class LuaEquipmentPrototype
---@field attack_parameters AttackParameters @The equipment attack parameters or `nil`.`[R]`
---@field automatic boolean @Is this active defense equipment automatic. Returns false if not active defense equipment.`[R]`
---@field background_color Color @The background color of this equipment prototype.`[R]`
---@field burner_prototype LuaBurnerPrototype @The burner energy source prototype this equipment uses or `nil`.`[R]`
---@field electric_energy_source_prototype LuaElectricEnergySourcePrototype @The electric energy source prototype this equipment uses or `nil`.`[R]`
---@field energy_consumption double @`[R]`
---@field energy_per_shield double @The energy per shield point restored. 0 for non-shield equipment.`[R]`
---@field energy_production double @The max power generated by this equipment.`[R]`
---@field energy_source LuaElectricEnergySourcePrototype @The energy source prototype for the equipment.`[R]`
---@field equipment_categories string[] @Category names for this equipment. These [categories](LuaEquipmentGridPrototype::equipment_categories) will be used to determine whether this equipment is allowed in a particular equipment grid.`[R]`
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---The logistic parameters for this roboport equipment.`[R]`
---
---Both the `charging_station_shift` and `stationing_offset` vectors are tables with `x` and `y` keys instead of an array.
---@field logistic_parameters LuaEquipmentPrototype.logistic_parameters
---@field movement_bonus float @`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field shape LuaEquipmentPrototype.shape @Shape of this equipment prototype.`[R]`
---@field shield float @The shield value of this equipment. 0 for non-shield equipment.`[R]`
---@field take_result LuaItemPrototype @The result item when taking this equipment out of an equipment grid. `nil` if there is no result item.`[R]`
---@field type string @Type of this equipment prototype.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaEquipmentPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaEquipmentPrototype.help() end


---@class LuaEquipmentPrototype.logistic_parameters
---@field charge_approach_distance float
---@field charging_distance float
---@field charging_energy double
---@field charging_station_count uint
---@field charging_station_shift Vector
---@field charging_threshold_distance float
---@field construction_radius float
---@field logistic_radius float
---@field logistics_connection_distance float
---@field robot_limit uint
---@field robot_vertical_acceleration float
---@field robots_shrink_when_entering_and_exiting boolean
---@field spawn_and_station_height float
---@field spawn_and_station_shadow_height_offset float
---@field stationing_offset Vector

---@class LuaEquipmentPrototype.shape
---@field height uint
---@field points? EquipmentPoint[] @Only set when the shape is "manual"
---@field width uint

---Encapsulates statistic data for different parts of the game. In the context of flow statistics, `input` and `output` describe on which side of the associated GUI the values are shown. Input values are shown on the left side, output values on the right side.
---
---Examples:
---- The item production GUI shows "consumption" on the right, thus `output` describes the item consumption numbers. The same goes for fluid consumption.
---- The kills GUI shows "losses" on the right, so `output` describes how many of the force's entities were killed by enemies.
---- The electric network GUI shows "power consumption" on the left side, so in this case `input` describes the power consumption numbers.
---@class LuaFlowStatistics
---@field force LuaForce @The force these statistics belong to or `nil` for pollution statistics.`[R]`
---@field input_counts table<string, uint64|double> @List of input counts indexed by prototype name. Represents the data that is shown on the left side of the GUI for the given statistics.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field output_counts table<string, uint64|double> @List of output counts indexed by prototype name. Represents the data that is shown on the right side of the GUI for the given statistics.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaFlowStatistics = {}

---Reset all the statistics data to 0.
function LuaFlowStatistics.clear() end

---Gets the flow count value for the given time frame. If `sample_index` is not provided, then the value returned is the average across the provided precision time period. These are the values shown in the bottom section of the statistics GUIs.
---
---Use `sample_index` to access the data used to generate the statistics graphs. Each precision level contains 300 samples of data so at a precision of 1 minute, each sample contains data averaged across 60s / 300 = 0.2s = 12 ticks.
---
---All return values are normalized to be per-tick for electric networks and per-minute for all other types.
---@param _table LuaFlowStatistics.get_flow_count
---@return double
function LuaFlowStatistics.get_flow_count(_table) end

---Gets the total input count for a given prototype.
---@param _name string @The prototype name.
---@return uint64|double
function LuaFlowStatistics.get_input_count(_name) end

---Gets the total output count for a given prototype.
---@param _name string @The prototype name.
---@return uint64|double
function LuaFlowStatistics.get_output_count(_name) end

---All methods and properties that this object supports.
---@return string
function LuaFlowStatistics.help() end

---Adds a value to this flow statistics.
---@param _name string @The prototype name.
---@param _count float @The count: positive or negative determines if the value goes in the input or output statistics.
function LuaFlowStatistics.on_flow(_name, _count) end

---Sets the total input count for a given prototype.
---@param _name string @The prototype name.
---@param _count uint64|double @The new count. The type depends on the instance of the statistics.
function LuaFlowStatistics.set_input_count(_name, _count) end

---Sets the total output count for a given prototype.
---@param _name string @The prototype name.
---@param _count uint64|double @The new count. The type depends on the instance of the statistics.
function LuaFlowStatistics.set_output_count(_name, _count) end


---@class LuaFlowStatistics.get_flow_count
---@field name string @The prototype name.
---@field input boolean @Read the input values or the output values
---@field precision_index defines.flow_precision_index @The precision range to read.
---@field sample_index? uint16 @The sample index to read from within the precision range. If not provided, the entire precision range is read. Must be between 1 and 300 where 1 is the most recent sample and 300 is the oldest.
---@field count? boolean @If true, the count of items/fluids/entities is returned instead of the per-time-frame value.

---An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending on its active recipe.
---
---See [Fluid](Fluid)
---
---Do note that reading from a [LuaFluidBox](LuaFluidBox) creates a new table and writing will copy the given fields from the table into the engine's own fluid box structure. Therefore, the correct way to update a fluidbox of an entity is to read it first, modify the table, then write the modified table back. Directly accessing the returned table's attributes won't have the desired effect.
---
---Double the temperature of the fluid in `entity`'s first fluid box. 
---```lua
---fluid = entity.fluidbox[1]
---fluid.temperature = fluid.temperature * 2
---entity.fluidbox[1] = fluid
---```
---@class LuaFluidBox
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field owner LuaEntity @The entity that owns this fluidbox.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field [number] Fluid @Access, set or clear a fluid box. The index must always be in bounds (see [LuaFluidBox::operator #](LuaFluidBox::operator #)). New fluidboxes may not be added or removed using this operator. If the given fluid box doesn't contain any fluid, `nil` is returned. Similarly, `nil` can be written to a fluid box to remove all fluid from it.`[R]`
local LuaFluidBox = {}

---Flushes all fluid from this fluidbox and its fluid system.
---@param _index uint
---@param _fluid? FluidIdentification @If provided, only this fluid is flushed.
---@return table<string, float> @The removed fluid.
function LuaFluidBox.flush(_index, _fluid) end

---The capacity of the given fluidbox index.
---@param _index uint
---@return double
function LuaFluidBox.get_capacity(_index) end

---The fluidboxes to which the fluidbox at the given index is connected.
---@param _index uint
---@return LuaFluidBox[]
function LuaFluidBox.get_connections(_index) end

---Get a fluid box filter
---@param _index uint @The index of the filter to get.
---@return FluidBoxFilter @The filter at the requested index, or `nil` if there isn't one.
function LuaFluidBox.get_filter(_index) end

---Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flow.
---
---Fluid wagons do not track it and will return 0.
---@param _index uint
---@return double
function LuaFluidBox.get_flow(_index) end

---Gets unique fluid system identifier of selected fluid box. May return nil for fluid wagon, fluid turret's internal buffer or a fluidbox which does not belong to a fluid system
---@param _index uint
---@return uint
function LuaFluidBox.get_fluid_system_id(_index) end

---Returns the fluid the fluidbox is locked onto
---@param _index uint
---@return string @`nil` if the fluidbox is not locked to any fluid.
function LuaFluidBox.get_locked_fluid(_index) end

---The prototype of this fluidbox index.
---@param _index uint
---@return LuaFluidBoxPrototype
function LuaFluidBox.get_prototype(_index) end

---All methods and properties that this object supports.
---@return string
function LuaFluidBox.help() end

---Set a fluid box filter.
---
---Some entities cannot have their fluidbox filter set, notably fluid wagons and crafting machines.
---@param _index uint @The index of the filter to set.
---@param _filter? FluidBoxFilterSpec @The filter to set. Setting `nil` clears the filter.
---@return boolean @Whether the filter was set successfully.
function LuaFluidBox.set_filter(_index, _filter) end

---A prototype of a fluidbox owned by some [LuaEntityPrototype](LuaEntityPrototype).
---@class LuaFluidBoxPrototype
---@field base_area double @`[R]`
---@field base_level double @`[R]`
---@field entity LuaEntityPrototype @The entity that this belongs to.`[R]`
---@field filter LuaFluidPrototype @The filter or `nil` if no filter is set.`[R]`
---@field height double @`[R]`
---@field index uint @The index of this fluidbox prototype in the owning entity.`[R]`
---@field maximum_temperature double @The maximum temperature or `nil` if none is set.`[R]`
---@field minimum_temperature double @The minimum temperature or `nil` if none is set.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field pipe_connections FluidBoxConnection[] @The pipe connection points.`[R]`
---@field production_type string @The production type. "input", "output", "input-output", or "none".`[R]`
---@field render_layer string @The render layer.`[R]`
---@field secondary_draw_orders int[] @The secondary draw orders for the 4 possible connection directions.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field volume double @`[R]`
local LuaFluidBoxPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaFluidBoxPrototype.help() end

---Prototype of a fluid energy source.
---@class LuaFluidEnergySourcePrototype
---@field burns_fluid boolean @`[R]`
---@field destroy_non_fuel_fluid boolean @`[R]`
---@field effectivity double @`[R]`
---@field emissions double @`[R]`
---@field fluid_box LuaFluidBoxPrototype @The fluid box for this energy source.`[R]`
---@field fluid_usage_per_tick double @`[R]`
---@field maximum_temperature double @`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field render_no_network_icon boolean @`[R]`
---@field render_no_power_icon boolean @`[R]`
---@field scale_fluid_usage boolean @`[R]`
---@field smoke SmokeSource[] @The smoke sources for this prototype if any.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaFluidEnergySourcePrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaFluidEnergySourcePrototype.help() end

---Prototype of a fluid.
---@class LuaFluidPrototype
---@field base_color Color @`[R]`
---@field default_temperature double @Default temperature of this fluid.`[R]`
---@field emissions_multiplier double @A multiplier on the amount of emissions produced when this fluid is burnt in a generator. A value above `1.0` increases emissions and vice versa. The multiplier can't be negative.`[R]`
---@field flow_color Color @`[R]`
---@field fuel_value double @The amount of energy in Joules one unit of this fluid will produce when burnt in a generator. A value of `0` means this fluid can't be used for energy generation. The value can't be negative.`[R]`
---@field gas_temperature double @The temperature above which this fluid will be shown as gaseous inside tanks and pipes.`[R]`
---@field group LuaGroup @Group of this prototype.`[R]`
---@field heat_capacity double @The amount of energy in Joules required to heat one unit of this fluid by 1°C.`[R]`
---@field hidden boolean @Whether this fluid is hidden from the fluid and signal selectors.`[R]`
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---@field max_temperature double @Maximum temperature this fluid can reach.`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field subgroup LuaGroup @Subgroup of this prototype.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaFluidPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaFluidPrototype.help() end

---Prototype of a font.
---@class LuaFontPrototype
---@field border boolean @`[R]`
---@field border_color Color @The border color or `nil` if not set.`[R]`
---@field filtered boolean @`[R]`
---@field from string @`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field size int @`[R]`
---@field spacing float @`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaFontPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaFontPrototype.help() end

---`LuaForce` encapsulates data local to each "force" or "faction" of the game. Default forces are player, enemy and neutral. Players and mods can create additional forces (up to 64 total).
---@class LuaForce
---Enables some higher-level AI behaviour for this force. When set to `true`, biters belonging to this force will automatically expand into new territories, build new spawners, and form unit groups. By default, this value is `true` for the enemy force and `false` for all others.`[RW]`
---
---Setting this to `false` does not turn off biters' AI. They will still move around and attack players who come close.
---\
---It is necessary for a force to be AI controllable in order to be able to create unit groups or build bases from scripts.
---@field ai_controllable boolean
---@field artillery_range_modifier double @`[RW]`
---@field character_build_distance_bonus uint @`[RW]`
---@field character_health_bonus double @`[RW]`
---@field character_inventory_slots_bonus uint @the number of additional inventory slots the character main inventory has.`[RW]`
---@field character_item_drop_distance_bonus uint @`[RW]`
---@field character_item_pickup_distance_bonus double @`[RW]`
---@field character_logistic_requests boolean @`true` if character requester logistics is enabled.`[RW]`
---@field character_loot_pickup_distance_bonus double @`[RW]`
---@field character_reach_distance_bonus uint @`[RW]`
---@field character_resource_reach_distance_bonus double @`[RW]`
---@field character_running_speed_modifier double @Modifies the running speed of all characters in this force by the given value as a percentage. Setting the running modifier to `0.5` makes the character run 50% faster. The minimum value of `-1` reduces the movement speed by 100%, resulting in a speed of `0`.`[RW]`
---@field character_trash_slot_count double @Number of character trash slots.`[RW]`
---The connected players belonging to this force.
---
---This is primarily useful when you want to do some action against all online players of this force.`[R]`
---
---This does *not* index using player index. See [LuaPlayer::index](LuaPlayer::index) on each player instance for the player index.
---@field connected_players LuaPlayer[]
---@field current_research LuaTechnology @The current technology in research, or `nil` if no research is currently ongoing.`[R]`
---@field deconstruction_time_to_live uint @The time, in ticks, before a deconstruction order is removed.`[RW]`
---@field entity_build_count_statistics LuaFlowStatistics @The entity build statistics for this force (built and mined)`[R]`
---@field evolution_factor double @Evolution factor of this force.`[RW]`
---@field evolution_factor_by_killing_spawners double @`[RW]`
---@field evolution_factor_by_pollution double @`[RW]`
---@field evolution_factor_by_time double @`[RW]`
---@field fluid_production_statistics LuaFlowStatistics @The fluid production statistics for this force.`[R]`
---@field following_robots_lifetime_modifier double @Additional lifetime for following robots.`[RW]`
---@field friendly_fire boolean @If friendly fire is enabled for this force.`[RW]`
---@field ghost_time_to_live uint @The time, in ticks, before a placed ghost disappears.`[RW]`
---@field index uint @Unique ID associated with this force.`[R]`
---@field inserter_stack_size_bonus double @The inserter stack size bonus for non stack inserters`[RW]`
---@field item_production_statistics LuaFlowStatistics @The item production statistics for this force.`[R]`
---@field items_launched table<string, uint> @All of the items that have been launched in rockets. The attribute is a dictionary mapping the item prototype names to the launched amounts.`[R]`
---@field kill_count_statistics LuaFlowStatistics @The kill counter statistics for this force.`[R]`
---@field laboratory_productivity_bonus double @`[RW]`
---@field laboratory_speed_modifier double @`[RW]`
---@field logistic_networks table<string, LuaLogisticNetwork[]> @List of logistic networks, grouped by surface.`[R]`
---Multiplier of the manual crafting speed. Default value is `0`. The actual crafting speed will be multiplied by `1 + manual_crafting_speed_modifier`.`[RW]`
---
---Double the player's crafting speed 
---```lua
---game.player.force.manual_crafting_speed_modifier = 1
---```
---@field manual_crafting_speed_modifier double
---Multiplier of the manual mining speed. Default value is `0`. The actual mining speed will be multiplied by `1 + manual_mining_speed_modifier`.`[RW]`
---
---Double the player's mining speed 
---```lua
---game.player.force.manual_mining_speed_modifier = 1
---```
---@field manual_mining_speed_modifier double
---@field max_failed_attempts_per_tick_per_construction_queue uint @`[RW]`
---@field max_successful_attempts_per_tick_per_construction_queue uint @`[RW]`
---@field maximum_following_robot_count uint @Maximum number of follower robots.`[RW]`
---@field mining_drill_productivity_bonus double @`[RW]`
---Name of the force.`[R]`
---
---Prints "`player`" 
---```lua
---game.player.print(game.player.force.name)
---```
---@field name string
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field players LuaPlayer[] @Players belonging to this force.`[R]`
---@field previous_research LuaTechnology @The previous research if any.`[RW]`
---Recipes available to this force, indexed by `name`.`[R]`
---
---Prints the category of the given recipe 
---```lua
---game.player.print(game.player.force.recipes["transport-belt"].category)
---```
---@field recipes table<string, LuaRecipe>
---@field research_enabled boolean @Whether research is enabled for this force, see [LuaForce::enable_research](LuaForce::enable_research) and [LuaForce::disable_research](LuaForce::disable_research)`[R]`
---@field research_progress double @Progress of current research, as a number in range [0, 1].`[RW]`
---The research queue of this force. The first technology in the array is the currently active one. Reading this attribute gives an array of [LuaTechnology](LuaTechnology).
---
---To write to this, the entire table must be written. Providing an empty table or `nil` will empty the research queue and cancel the current research. Writing to this when the research queue is disabled will simply set the last research in the table as the current research.`[RW]`
---
---This only allows mods to queue research that this force is able to research in the first place. As an example, an already researched technology or one whose prerequisites are not fulfilled will not be queued, but dropped silently instead.
---@field research_queue TechnologyIdentification[]
---@field research_queue_enabled boolean @Whether the research queue is available for this force.`[RW]`
---@field rockets_launched uint @The number of rockets launched.`[RW]`
---@field share_chart boolean @If sharing chart data is enabled for this force.`[RW]`
---@field stack_inserter_capacity_bonus uint @Number of items that can be transferred by stack inserters. When writing to this value, it must be >= 0 and <= 254.`[RW]`
---Technologies owned by this force, indexed by `name`.`[R]`
---
---Researches the technology for the player's force 
---```lua
---game.player.force.technologies["steel-processing"].researched = true
---```
---@field technologies table<string, LuaTechnology>
---@field train_braking_force_bonus double @`[RW]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field worker_robots_battery_modifier double @`[RW]`
---@field worker_robots_speed_modifier double @`[RW]`
---@field worker_robots_storage_bonus double @`[RW]`
---@field zoom_to_world_blueprint_enabled boolean @Ability to create new blueprints using empty blueprint item when using zoom-to-world.`[RW]`
---@field zoom_to_world_deconstruction_planner_enabled boolean @Ability to use deconstruction planner when using zoom-to-world.`[RW]`
---@field zoom_to_world_enabled boolean @Ability to use zoom-to-world on map.`[RW]`
---@field zoom_to_world_ghost_building_enabled boolean @Ability to build ghosts through blueprint or direct ghost placement, or "mine" ghosts when using zoom-to-world.`[RW]`
---@field zoom_to_world_selection_tool_enabled boolean @Ability to use custom selection tools when using zoom-to-world.`[RW]`
local LuaForce = {}

---Adds a custom chart tag to the given surface and returns the new tag or `nil` if the given position isn't valid for a chart tag.
---
---The chunk must be charted for a tag to be valid at that location.
---@param _surface SurfaceIdentification @Which surface to add the tag to.
---@param _tag ChartTagSpec @The tag to add.
---@return LuaCustomChartTag
function LuaForce.add_chart_tag(_surface, _tag) end

---Add this technology to the back of the research queue if the queue is enabled. Otherwise, set this technology to be researched now.
---@param _technology TechnologyIdentification
---@return boolean @Whether the technology was successfully added.
function LuaForce.add_research(_technology) end

---Cancels pending chart requests for the given surface or all surfaces.
---@param _surface? SurfaceIdentification
function LuaForce.cancel_charting(_surface) end

---Stop the research currently in progress. This will remove any dependent technologies from the research queue.
function LuaForce.cancel_current_research() end

---Chart a portion of the map. The chart for the given area is refreshed; it creates chart for any parts of the given area that haven't been charted yet.
---
---Charts a 2048x2048 rectangle centered around the origin. 
---```lua
---game.player.force.chart(game.player.surface, {{x = -1024, y = -1024}, {x = 1024, y = 1024}})
---```
---@param _surface SurfaceIdentification
---@param _area BoundingBox @The area on the given surface to chart.
function LuaForce.chart(_surface, _area) end

---Chart all generated chunks.
---@param _surface? SurfaceIdentification @Which surface to chart or all if not given.
function LuaForce.chart_all(_surface) end

---Erases chart data for this force.
---@param _surface? SurfaceIdentification @Which surface to erase chart data for or if not provided all surfaces charts are erased.
function LuaForce.clear_chart(_surface) end

---Disable all recipes and technologies. Only recipes and technologies enabled explicitly will be useable from this point.
function LuaForce.disable_all_prototypes() end

---Disable research for this force.
function LuaForce.disable_research() end

---Enables all recipes and technologies. The opposite of [LuaForce::disable_all_prototypes](LuaForce::disable_all_prototypes)
function LuaForce.enable_all_prototypes() end

---Unlock all recipes.
function LuaForce.enable_all_recipes() end

---Unlock all technologies.
function LuaForce.enable_all_technologies() end

---Enable research for this force.
function LuaForce.enable_research() end

---Finds all custom chart tags within the given bounding box on the given surface.
---@param _surface SurfaceIdentification
---@param _area? BoundingBox
---@return LuaCustomChartTag[]
function LuaForce.find_chart_tags(_surface, _area) end

---@param _position MapPosition @Position to find a network for
---@param _surface SurfaceIdentification @Surface to search on
---@return LuaLogisticNetwork @The found network or `nil`.
function LuaForce.find_logistic_network_by_position(_position, _surface) end

---@param _ammo string @Ammo category
---@return double
function LuaForce.get_ammo_damage_modifier(_ammo) end

---Is `other` force in this force's cease fire list?
---@param _other ForceIdentification
---@return boolean
function LuaForce.get_cease_fire(_other) end

---Count entities of given type.
---
---This function has O(1) time complexity as entity counts are kept and maintained in the game engine.
---@param _name string @Prototype name of the entity.
---@return uint @Number of entities of given prototype belonging to this force.
function LuaForce.get_entity_count(_name) end

---Is `other` force in this force's friends list.
---@param _other ForceIdentification
---@return boolean
function LuaForce.get_friend(_other) end

---@param _ammo string @Ammo category
---@return double
function LuaForce.get_gun_speed_modifier(_ammo) end

---Gets if the given recipe is explicitly disabled from being hand crafted.
---@param _recipe string|LuaRecipe
---@return boolean
function LuaForce.get_hand_crafting_disabled_for_recipe(_recipe) end

---Gets the count of a given item launched in rockets.
---@param _item string @The item to get
---@return uint @The count of the item that has been launched.
function LuaForce.get_item_launched(_item) end

---Gets the linked inventory for the given prototype and link ID if it exists or `nil`.
---@param _prototype EntityPrototypeIdentification
---@param _link_id uint
---@return LuaInventory
function LuaForce.get_linked_inventory(_prototype, _link_id) end

---Gets the saved progress for the given technology or `nil` if there is no saved progress.
---@param _technology TechnologyIdentification @The technology
---@return double @The progress as a percent.
function LuaForce.get_saved_technology_progress(_technology) end

---@param _surface SurfaceIdentification
---@return MapPosition
function LuaForce.get_spawn_position(_surface) end

---Gets train stops matching the given filters.
---@param _table? LuaForce.get_train_stops
---@return LuaEntity[]
function LuaForce.get_train_stops(_table) end

---@param _surface? SurfaceIdentification @If given only trains on the surface are returned.
---@return LuaTrain[]
function LuaForce.get_trains(_surface) end

---@param _turret string @Turret prototype name
---@return double
function LuaForce.get_turret_attack_modifier(_turret) end

---All methods and properties that this object supports.
---@return string
function LuaForce.help() end

---Has a chunk been charted?
---@param _surface SurfaceIdentification
---@param _position ChunkPosition @Position of the chunk.
---@return boolean
function LuaForce.is_chunk_charted(_surface, _position) end

---Is the given chunk currently charted and visible (not covered by fog of war) on the map.
---@param _surface SurfaceIdentification
---@param _position ChunkPosition
---@return boolean
function LuaForce.is_chunk_visible(_surface, _position) end

---Is this force an enemy? This differs from `get_cease_fire` in that it is always false for neutral force. This is equivalent to checking the `enemy` ForceCondition.
---@param _other ForceIdentification
---@return boolean
function LuaForce.is_enemy(_other) end

---Is this force a friend? This differs from `get_friend` in that it is always true for neutral force. This is equivalent to checking the `friend` ForceCondition.
---@param _other ForceIdentification
---@return boolean
function LuaForce.is_friend(_other) end

---Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.
---@return boolean
function LuaForce.is_pathfinder_busy() end

---Kill all units and flush the pathfinder.
function LuaForce.kill_all_units() end

---Play a sound for every player in this force.
---@param _table LuaForce.play_sound
function LuaForce.play_sound(_table) end

---Print text to the chat console of all players on this force.
---
---Messages that are identical to a message sent in the last 60 ticks are not printed again.
---@param _message LocalisedString
---@param _color? Color
function LuaForce.print(_message, _color) end

---Force a rechart of the whole chart.
function LuaForce.rechart() end

---Research all technologies.
---@param _include_disabled_prototypes? boolean @Whether technologies that are explicitly disabled in the prototype should also be researched. Defaults to `false`.
function LuaForce.research_all_technologies(_include_disabled_prototypes) end

---Reset everything. All technologies are set to not researched, all modifiers are set to default values.
function LuaForce.reset() end

---Resets evolution for this force to zero.
function LuaForce.reset_evolution() end

---Load the original version of all recipes from the prototypes.
function LuaForce.reset_recipes() end

---Load the original versions of technologies from prototypes. Preserves research state of technologies.
function LuaForce.reset_technologies() end

---Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.
function LuaForce.reset_technology_effects() end

---@param _ammo string @Ammo category
---@param _modifier double
function LuaForce.set_ammo_damage_modifier(_ammo, _modifier) end

---Add `other` force to this force's cease fire list. Forces on the cease fire list won't be targeted for attack.
---@param _other ForceIdentification
---@param _cease_fire boolean
function LuaForce.set_cease_fire(_other, _cease_fire) end

---Add `other` force to this force's friends list. Friends have unrestricted access to buildings and turrets won't fire at them.
---@param _other ForceIdentification
---@param _friend boolean
function LuaForce.set_friend(_other, _friend) end

---@param _ammo string @Ammo category
---@param _modifier double
function LuaForce.set_gun_speed_modifier(_ammo, _modifier) end

---Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.
---@param _recipe string|LuaRecipe
---@param _hand_crafting_disabled boolean
function LuaForce.set_hand_crafting_disabled_for_recipe(_recipe, _hand_crafting_disabled) end

---Sets the count of a given item launched in rockets.
---@param _item string @The item to set
---@param _count uint @The count to set
function LuaForce.set_item_launched(_item, _count) end

---Sets the saved progress for the given technology. The technology must not be in progress, must not be completed, and the new progress must be < 100%.
---@param _technology TechnologyIdentification @The technology
---@param _progress double @Progress as a percent. Set to `nil` to remove the saved progress.
function LuaForce.set_saved_technology_progress(_technology, _progress) end

---@param _position MapPosition @The new position on the given surface.
---@param _surface SurfaceIdentification @Surface to set the spawn position for.
function LuaForce.set_spawn_position(_position, _surface) end

---@param _turret string @Turret prototype name
---@param _modifier double
function LuaForce.set_turret_attack_modifier(_turret, _modifier) end

---@param _position ChunkPosition @The chunk position to unchart.
---@param _surface SurfaceIdentification @Surface to unchart on.
function LuaForce.unchart_chunk(_position, _surface) end


---@class LuaForce.get_train_stops
---@field name? string|string[]
---@field surface? SurfaceIdentification

---@class LuaForce.play_sound
---@field path SoundPath @The sound to play.
---@field position? MapPosition @Where the sound should be played. If not given, it's played at the current position of each player.
---@field volume_modifier? double @The volume of the sound to play. Must be between 0 and 1 inclusive.
---@field override_sound_type? SoundType @The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.

---Prototype of a fuel category.
---@class LuaFuelCategoryPrototype
---@field localised_description LocalisedString @`[R]`
---@field localised_name LocalisedString @`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaFuelCategoryPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaFuelCategoryPrototype.help() end

---Main toplevel type, provides access to most of the API though its members. An instance of LuaGameScript is available as the global object named `game`.
---@class LuaGameScript
---@field achievement_prototypes table<string, LuaAchievementPrototype> @A dictionary containing every LuaAchievementPrototype indexed by `name`.`[R]`
---The active mods versions. The keys are mod names, the values are the versions.`[R]`
---
---This will print the names and versions of active mods to player p's console. 
---```lua
---for name, version in pairs(game.active_mods) do
---  p.print(name .. " version " .. version)
---end
---```
---@field active_mods table<string, string>
---@field ammo_category_prototypes table<string, LuaAmmoCategoryPrototype> @A dictionary containing every LuaAmmoCategoryPrototype indexed by `name`.`[R]`
---@field autoplace_control_prototypes table<string, LuaAutoplaceControlPrototype> @A dictionary containing every LuaAutoplaceControlPrototype indexed by `name`.`[R]`
---@field autosave_enabled boolean @True by default. Can be used to disable autosaving. Make sure to turn it back on soon after.`[RW]`
---@field backer_names table<uint, string> @Array of the names of all the backers that supported the game development early on. These are used as names for labs, locomotives, radars, roboports, and train stops.`[R]`
---The players that are currently online.
---
---This is primarily useful when you want to do some action against all online players.`[R]`
---
---This does *not* index using player index. See [LuaPlayer::index](LuaPlayer::index) on each player instance for the player index.
---@field connected_players LuaPlayer[]
---@field custom_input_prototypes table<string, LuaCustomInputPrototype> @A dictionary containing every LuaCustomInputPrototype indexed by `name`.`[R]`
---@field damage_prototypes table<string, LuaDamagePrototype> @A dictionary containing every LuaDamagePrototype indexed by `name`.`[R]`
---@field decorative_prototypes table<string, LuaDecorativePrototype> @A dictionary containing every LuaDecorativePrototype indexed by `name`.`[R]`
---@field default_map_gen_settings MapGenSettings @The default map gen settings for this save.`[R]`
---@field difficulty defines.difficulty @Current scenario difficulty.`[R]`
---The currently active set of difficulty settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game. This is however not recommended as different difficulties can have differing technology and recipe trees, which can cause problems for players.`[R]`
---
---This will set the technology price multiplier to 12. 
---```lua
---game.difficulty_settings.technology_price_multiplier = 12
---```
---@field difficulty_settings DifficultySettings
---@field draw_resource_selection boolean @True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map.`[RW]`
---@field enemy_has_vision_on_land_mines boolean @Determines if enemy land mines are completely invisible or not.`[RW]`
---@field entity_prototypes table<string, LuaEntityPrototype> @A dictionary containing every LuaEntityPrototype indexed by `name`.`[R]`
---@field equipment_category_prototypes table<string, LuaEquipmentCategoryPrototype> @A dictionary containing every LuaEquipmentCategoryPrototype indexed by `name`.`[R]`
---@field equipment_grid_prototypes table<string, LuaEquipmentGridPrototype> @A dictionary containing every LuaEquipmentGridPrototype indexed by `name`.`[R]`
---@field equipment_prototypes table<string, LuaEquipmentPrototype> @A dictionary containing every LuaEquipmentPrototype indexed by `name`.`[R]`
---@field finished boolean @True while the victory screen is shown.`[R]`
---@field finished_but_continuing boolean @True after players finished the game and clicked "continue".`[R]`
---@field fluid_prototypes table<string, LuaFluidPrototype> @A dictionary containing every LuaFluidPrototype indexed by `name`.`[R]`
---@field font_prototypes table<string, LuaFontPrototype> @A dictionary containing every LuaFontPrototype indexed by `name`.`[R]`
---@field forces table<uint|string, LuaForce> @Get a table of all the forces that currently exist. This sparse table allows you to find forces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will only iterate the array part of the table. Iterating with `ipairs()` will not work at all.`[R]`
---@field fuel_category_prototypes table<string, LuaFuelCategoryPrototype> @A dictionary containing every LuaFuelCategoryPrototype indexed by `name`.`[R]`
---@field item_group_prototypes table<string, LuaGroup> @A dictionary containing every ItemGroup indexed by `name`.`[R]`
---@field item_prototypes table<string, LuaItemPrototype> @A dictionary containing every LuaItemPrototype indexed by `name`.`[R]`
---@field item_subgroup_prototypes table<string, LuaGroup> @A dictionary containing every ItemSubgroup indexed by `name`.`[R]`
---A dictionary containing every MapGenPreset indexed by `name`.`[R]`
---
---A MapGenPreset is an exact copy of the prototype table provided from the data stage.
---@field map_gen_presets table<string, MapGenPreset>
---The currently active set of map settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game.`[R]`
---
---This does not contain difficulty settings, use [LuaGameScript::difficulty_settings](LuaGameScript::difficulty_settings) instead.
---@field map_settings MapSettings
---@field max_beacon_supply_area_distance double @`[R]`
---@field max_electric_pole_connection_distance double @`[R]`
---@field max_electric_pole_supply_area_distance float @`[R]`
---@field max_force_distraction_chunk_distance uint @`[R]`
---@field max_force_distraction_distance double @`[R]`
---@field max_gate_activation_distance double @`[R]`
---@field max_inserter_reach_distance double @`[R]`
---@field max_pipe_to_ground_distance uint8 @`[R]`
---@field max_underground_belt_distance uint8 @`[R]`
---@field mod_setting_prototypes table<string, LuaModSettingPrototype> @A dictionary containing every LuaModSettingPrototype indexed by `name`.`[R]`
---@field module_category_prototypes table<string, LuaModuleCategoryPrototype> @A dictionary containing every LuaModuleCategoryPrototype indexed by `name`.`[R]`
---@field named_noise_expressions table<string, LuaNamedNoiseExpression> @A dictionary containing every LuaNamedNoiseExpression indexed by `name`.`[R]`
---@field noise_layer_prototypes table<string, LuaNoiseLayerPrototype> @A dictionary containing every LuaNoiseLayerPrototype indexed by `name`.`[R]`
---@field object_name string @This object's name.`[R]`
---@field particle_prototypes table<string, LuaParticlePrototype> @A dictionary containing every LuaParticlePrototype indexed by `name`.`[R]`
---@field permissions LuaPermissionGroups @`[R]`
---This property is only populated inside [custom command](LuaCommandProcessor) handlers and when writing [Lua console commands](https://wiki.factorio.com/Console#Scripting_and_cheat_commands). Returns the player that is typing the command, `nil` in all other instances.
---
---See [LuaGameScript::players](LuaGameScript::players) for accessing all players.`[R]`
---@field player LuaPlayer
---@field players table<uint|string, LuaPlayer> @Get a table of all the players that currently exist. This sparse table allows you to find players by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will only iterate the array part of the table. Iterating with `ipairs()` will not work at all.`[R]`
---@field pollution_statistics LuaFlowStatistics @The pollution statistics for this map.`[R]`
---@field recipe_category_prototypes table<string, LuaRecipeCategoryPrototype> @A dictionary containing every LuaRecipeCategoryPrototype indexed by `name`.`[R]`
---@field recipe_prototypes table<string, LuaRecipePrototype> @A dictionary containing every LuaRecipePrototype indexed by `name`.`[R]`
---@field resource_category_prototypes table<string, LuaResourceCategoryPrototype> @A dictionary containing every LuaResourceCategoryPrototype indexed by `name`.`[R]`
---@field shortcut_prototypes table<string, LuaShortcutPrototype> @A dictionary containing every LuaShortcutPrototype indexed by `name`.`[R]`
---Speed to update the map at. 1.0 is normal speed -- 60 UPS.`[RW]`
---
---Minimum value is 0.01.
---@field speed float
---@field styles table<string, string> @The styles that [LuaGuiElement](LuaGuiElement) can use, indexed by `name`.`[R]`
---@field surfaces table<uint|string, LuaSurface> @Get a table of all the surfaces that currently exist. This sparse table allows you to find surfaces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will only iterate the array part of the table. Iterating with `ipairs()` will not work at all.`[R]`
---@field technology_prototypes table<string, LuaTechnologyPrototype> @A dictionary containing every [LuaTechnologyPrototype](LuaTechnologyPrototype) indexed by `name`.`[R]`
---@field tick uint @Current map tick.`[R]`
---@field tick_paused boolean @If the tick has been paused. This means that entity update has been paused.`[RW]`
---The number of ticks since this game was 'created'. A game is 'created' either by using "new game" or "new game from scenario".`[R]`
---
---This differs over [LuaGameScript::tick](LuaGameScript::tick) in that making a game from a scenario always starts with ticks_played value at 0 even if the scenario has its own level data where the [LuaGameScript::tick](LuaGameScript::tick) is > 0.
---\
---This value has no relation with [LuaGameScript::tick](LuaGameScript::tick) and can be completely different values.
---@field ticks_played uint
---@field ticks_to_run uint @The number of ticks to be run while the tick is paused. When [LuaGameScript::tick_paused](LuaGameScript::tick_paused) is true, ticks_to_run behaves the following way: While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again.`[RW]`
---@field tile_prototypes table<string, LuaTilePrototype> @A dictionary containing every LuaTilePrototype indexed by `name`.`[R]`
---@field trivial_smoke_prototypes table<string, LuaTrivialSmokePrototype> @A dictionary containing every LuaTrivialSmokePrototype indexed by `name`.`[R]`
---@field virtual_signal_prototypes table<string, LuaVirtualSignalPrototype> @A dictionary containing every LuaVirtualSignalPrototype indexed by `name`.`[R]`
local LuaGameScript = {}

---Instruct the game to perform an auto-save.
---
---Only the server will save in multiplayer. In single player a standard auto-save is triggered.
---@param _name? string @The autosave name if any. Saves will be named _autosave-*name* when provided.
function LuaGameScript.auto_save(_name) end

---Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to ban.
---@param _reason? LocalisedString @The reason given if any.
function LuaGameScript.ban_player(_player, _reason) end

---Run internal consistency checks. Allegedly prints any errors it finds.
---
---Exists mainly for debugging reasons.
function LuaGameScript.check_consistency() end

---Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.
---
---Also prints true/false if called from the console.
function LuaGameScript.check_prototype_translations() end

---Counts how many distinct groups of pipes exist in the world.
function LuaGameScript.count_pipe_groups() end

---Create a new force.
---
---The game currently supports a maximum of 64 forces, including the three built-in forces. This means that a maximum of 61 new forces may be created.
---\
---Force names must be unique.
---@param _force string @Name of the new force
---@return LuaForce @The force that was just created
function LuaGameScript.create_force(_force) end

---Creates an inventory that is not owned by any game object. It can be resized later with [LuaInventory::resize](LuaInventory::resize).
---
---Make sure to destroy it when you are done with it using [LuaInventory::destroy](LuaInventory::destroy).
---@param _size uint16 @The number of slots the inventory initially has.
---@return LuaInventory
function LuaGameScript.create_inventory(_size) end

---Creates a [LuaProfiler](LuaProfiler), which is used for measuring script performance.
---
---LuaProfiler cannot be serialized.
---@param _stopped? boolean @Create the timer stopped
---@return LuaProfiler
function LuaGameScript.create_profiler(_stopped) end

---Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.
---
---*Make sure* you actually want to use this over math.random(...) as this provides entirely different functionality over math.random(...).
---@param _seed? uint
---@return LuaRandomGenerator
function LuaGameScript.create_random_generator(_seed) end

---Create a new surface.
---
---The game currently supports a maximum of 4,294,967,295 surfaces, including the default surface.
---\
---Surface names must be unique.
---@param _name string @Name of the new surface.
---@param _settings? MapGenSettings @Map generation settings.
---@return LuaSurface @The surface that was just created.
function LuaGameScript.create_surface(_name, _settings) end

---Base64 decodes and inflates the given string.
---@param _string string @The string to decode.
---@return string @The decoded string or `nil` if the decode failed.
function LuaGameScript.decode_string(_string) end

---Deletes the given surface and all entities on it.
---@param _surface string|LuaSurface @The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.
function LuaGameScript.delete_surface(_surface) end

---Converts the given direction into the string version of the direction.
---@param _direction defines.direction
function LuaGameScript.direction_to_string(_direction) end

---Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.
function LuaGameScript.disable_replay() end

---Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.
function LuaGameScript.disable_tutorial_triggers() end

---Deflates and base64 encodes the given string.
---@param _string string @The string to encode.
---@return string @The encoded string or `nil` if the encode failed.
function LuaGameScript.encode_string(_string) end

---Evaluate an expression, substituting variables as provided. For details on the formula, see the relevant page on the [Factorio wiki](https://wiki.factorio.com/Prototype/Technology#unit).
---
---Calculate the number of research units required to unlock mining productivity level 10. 
---```lua
---local formula = game.forces["player"].technologies["mining-productivity-4"].research_unit_count_formula
---local units = game.evaluate_expression(formula, { L = 10, l = 10 })
---```
---@param _expression string @The expression to evaluate.
---@param _variables? table<string, double> @Variables to be substituted.
---@return double
function LuaGameScript.evaluate_expression(_expression, _variables) end

---Force a CRC check. Tells all peers to calculate their current map CRC; these CRC are then compared against each other. If a mismatch is detected, the game is desynced and some peers are forced to reconnect.
function LuaGameScript.force_crc() end

---Gets the number of entities that are active (updated each tick).
---
---This is very expensive to determine.
---@param _surface? SurfaceIdentification @If give, only the entities active on this surface are counted.
---@return uint
function LuaGameScript.get_active_entities_count(_surface) end

---@param _tag string
---@return LuaEntity
function LuaGameScript.get_entity_by_tag(_tag) end

---Returns a dictionary of all LuaAchievementPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every achievement prototype that is not allowed to be completed on the peaceful difficulty setting. 
---```lua
---local prototypes = game.get_filtered_achievement_prototypes{{filter="allowed-without-fight", invert=true}}
---```
---@param _filters AchievementPrototypeFilter[]
---@return table<string, LuaAchievementPrototype>
function LuaGameScript.get_filtered_achievement_prototypes(_filters) end

---Returns a dictionary of all LuaDecorativePrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every decorative prototype that is auto-placed. 
---```lua
---local prototypes = game.get_filtered_decorative_prototypes{{filter="autoplace"}}
---```
---@param _filters DecorativePrototypeFilter[]
---@return table<string, LuaDecorativePrototype>
function LuaGameScript.get_filtered_decorative_prototypes(_filters) end

---Returns a dictionary of all LuaEntityPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every entity prototype that can craft recipes involving fluids in the way some assembling machines can. 
---```lua
---local prototypes = game.get_filtered_entity_prototypes{{filter="crafting-category", crafting_category="crafting-with-fluid"}}
---```
---@param _filters EntityPrototypeFilter[]
---@return table<string, LuaEntityPrototype>
function LuaGameScript.get_filtered_entity_prototypes(_filters) end

---Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every equipment prototype that functions as a battery. 
---```lua
---local prototypes = game.get_filtered_equipment_prototypes{{filter="type", type="battery-equipment"}}
---```
---@param _filters EquipmentPrototypeFilter[]
---@return table<string, LuaEquipmentPrototype>
function LuaGameScript.get_filtered_equipment_prototypes(_filters) end

---Returns a dictionary of all LuaFluidPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every fluid prototype that has a heat capacity of exactly `100`. 
---```lua
---local prototypes = game.get_filtered_fluid_prototypes{{filter="heat-capacity", comparison="=", value=100}}
---```
---@param _filters FluidPrototypeFilter[]
---@return table<string, LuaFluidPrototype>
function LuaGameScript.get_filtered_fluid_prototypes(_filters) end

---Returns a dictionary of all LuaItemPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every item prototype that, when launched with a rocket, produces a result. 
---```lua
---local prototypes = game.get_filtered_item_prototypes{{filter="has-rocket-launch-products"}}
---```
---@param _filters ItemPrototypeFilter[]
---@return table<string, LuaItemPrototype>
function LuaGameScript.get_filtered_item_prototypes(_filters) end

---Returns a dictionary of all LuaModSettingPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every mod setting prototype that belongs to the specified mod. 
---```lua
---local prototypes = game.get_filtered_mod_setting_prototypes{{filter="mod", mod="space-exploration"}}
---```
---@param _filters ModSettingPrototypeFilter[]
---@return table<string, LuaModSettingPrototype>
function LuaGameScript.get_filtered_mod_setting_prototypes(_filters) end

---Returns a dictionary of all LuaRecipePrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every recipe prototype that takes less than half a second to craft (at crafting speed `1`). 
---```lua
---local prototypes = game.get_filtered_recipe_prototypes{{filter="energy", comparison="<", value=0.5}}
---```
---@param _filters RecipePrototypeFilter[]
---@return table<string, LuaRecipePrototype>
function LuaGameScript.get_filtered_recipe_prototypes(_filters) end

---Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every technology prototype that can be researched at the start of the game. 
---```lua
---local prototypes = game.get_filtered_technology_prototypes{{filter="has-prerequisites", invert=true}}
---```
---@param _filters TechnologyPrototypeFilter[]
---@return table<string, LuaTechnologyPrototype>
function LuaGameScript.get_filtered_technology_prototypes(_filters) end

---Returns a dictionary of all LuaTilePrototypes that fit the given filters. The prototypes are indexed by `name`.
---
---Get every tile prototype that improves a player's walking speed by at least 50%. 
---```lua
---local prototypes = game.get_filtered_tile_prototypes{{filter="walking-speed-modifier", comparison="≥", value=1.5}}
---```
---@param _filters TilePrototypeFilter[]
---@return table<string, LuaTilePrototype>
function LuaGameScript.get_filtered_tile_prototypes(_filters) end

---Gets the map exchange string for the map generation settings that were used to create this map.
---@return string
function LuaGameScript.get_map_exchange_string() end

---Gets the given player or returns `nil` if no player is found.
---
---This is a shortcut for game.players[...]
---@param _player uint|string @The player index or name.
---@return LuaPlayer
function LuaGameScript.get_player(_player) end

---Gets the inventories created through [LuaGameScript::create_inventory](LuaGameScript::create_inventory)
---
---Inventories created through console commands will be owned by `"core"`.
---@param _mod? string @The mod who's inventories to get. If not provided all inventories are returned.
---@return table<string, LuaInventory[]> @A mapping of mod name to array of inventories owned by that mod.
function LuaGameScript.get_script_inventories(_mod) end

---Gets the given surface or returns `nil` if no surface is found.
---
---This is a shortcut for game.surfaces[...]
---@param _surface uint|string @The surface index or name.
---@return LuaSurface
function LuaGameScript.get_surface(_surface) end

---Gets train stops matching the given filters.
---@param _table? LuaGameScript.get_train_stops
---@return LuaEntity[]
function LuaGameScript.get_train_stops(_table) end

---Is this the demo version of Factorio?
---@return boolean
function LuaGameScript.is_demo() end

---Is the map loaded is multiplayer?
---@return boolean
function LuaGameScript.is_multiplayer() end

---Checks if the given SoundPath is valid.
---@param _sound_path SoundPath @Path to the sound.
---@return boolean
function LuaGameScript.is_valid_sound_path(_sound_path) end

---Checks if the given SpritePath is valid and contains a loaded sprite. The existence of the image is not checked for paths of type `file`.
---@param _sprite_path SpritePath @Path to the image.
---@return boolean
function LuaGameScript.is_valid_sprite_path(_sprite_path) end

---Convert a JSON string to a table.
---@param _json string @The string to convert.
---@return AnyBasic @The returned object, or `nil` if the JSON string was invalid.
function LuaGameScript.json_to_table(_json) end

---Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to kick.
---@param _reason? LocalisedString @The reason given if any.
function LuaGameScript.kick_player(_player, _reason) end

---Marks two forces to be merged together. All entities in the source force will be reassigned to the target force. The source force will then be destroyed.
---
---The three built-in forces -- player, enemy and neutral -- can't be destroyed. I.e. they can't be used as the source argument to this function.
---\
---The source force is not removed until the end of the current tick, or if called during the [on_forces_merging](on_forces_merging) or [on_forces_merged](on_forces_merged) event, the end of the next tick.
---@param _source ForceIdentification @The force to remove.
---@param _destination ForceIdentification @The force to reassign all entities to.
function LuaGameScript.merge_forces(_source, _destination) end

---Mutes the given player. Does nothing if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to mute.
function LuaGameScript.mute_player(_player) end

---Convert a map exchange string to map gen settings and map settings.
---@param _map_exchange_string string
---@return MapExchangeStringData
function LuaGameScript.parse_map_exchange_string(_map_exchange_string) end

---Play a sound for every player in the game.
---@param _table LuaGameScript.play_sound
function LuaGameScript.play_sound(_table) end

---Print text to the chat console all players.
---
---Messages that are identical to a message sent in the last 60 ticks are not printed again.
---@param _message LocalisedString
---@param _color? Color
function LuaGameScript.print(_message, _color) end

---Purges the given players messages from the game. Does nothing if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to purge.
function LuaGameScript.purge_player(_player) end

---Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.
---
---All specified entity prototypes must be autoplacable.
---@param _entities string|string[] @Prototype names of entity or entities to autoplace.
function LuaGameScript.regenerate_entity(_entities) end

---Forces a reload of all mods.
---
---This will act like saving and loading from the mod(s) perspective.
---\
---This will do nothing if run in multiplayer.
---\
---This disables the replay if replay is enabled.
function LuaGameScript.reload_mods() end

---Forces a reload of the scenario script from the original scenario location.
---
---This disables the replay if replay is enabled.
function LuaGameScript.reload_script() end

---Remove players who are currently not connected from the map.
---@param _players? LuaPlayer|string[] @List of players to remove. If not specified, remove all offline players.
function LuaGameScript.remove_offline_players(_players) end

---Remove a file or directory in the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). Can be used to remove files created by [LuaGameScript::write_file](LuaGameScript::write_file).
---@param _path string @The path to the file or directory to remove, relative to `script-output`.
function LuaGameScript.remove_path(_path) end

---Reset scenario state (game_finished, player_won, etc.).
function LuaGameScript.reset_game_state() end

---Resets the amount of time played for this map.
function LuaGameScript.reset_time_played() end

---Saves the current configuration of Atlas to a file. This will result in huge file containing all of the game graphics moved to as small space as possible.
---
---Exists mainly for debugging reasons.
function LuaGameScript.save_atlas() end

---Instruct the server to save the map.
---@param _name? string @Save name. If not specified, writes into the currently-running save.
function LuaGameScript.server_save(_name) end

---Set scenario state.
---@param _table LuaGameScript.set_game_state
function LuaGameScript.set_game_state(_table) end

---Forces the screenshot saving system to wait until all queued screenshots have been written to disk.
function LuaGameScript.set_wait_for_screenshots_to_finish() end

---Show an in-game message dialog.
---
---Can only be used when the map contains exactly one player.
---@param _table LuaGameScript.show_message_dialog
function LuaGameScript.show_message_dialog(_table) end

---Convert a table to a JSON string
---@param _data table
---@return string
function LuaGameScript.table_to_json(_data) end

---Take a screenshot of the game and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.
---
---If Factorio is running headless, this function will do nothing.
---@param _table LuaGameScript.take_screenshot
function LuaGameScript.take_screenshot(_table) end

---Take a screenshot of the technology screen and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.
---@param _table LuaGameScript.take_technology_screenshot
function LuaGameScript.take_technology_screenshot(_table) end

---Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to unban.
function LuaGameScript.unban_player(_player) end

---Unmutes the given player. Does nothing if the player running this isn't an admin.
---@param _player PlayerIdentification @The player to unmute.
function LuaGameScript.unmute_player(_player) end

---Write a file to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name and file extension of the file can be specified via the `filename` parameter.
---@param _filename string @The name of the file. Providing a directory path (ex. `"save/here/example.txt"`) will create the necessary folder structure in `script-output`.
---@param _data LocalisedString @The content to write to the file.
---@param _append? boolean @If `true`, `data` will be appended to the end of the file. Defaults to `false`, which will overwrite any pre-existing file with the new `data`.
---@param _for_player? uint @If given, the file will only be written for this `player_index`. Providing `0` will only write to the server's output if present.
function LuaGameScript.write_file(_filename, _data, _append, _for_player) end


---@class LuaGameScript.get_train_stops
---@field name? string|string[]
---@field surface? SurfaceIdentification
---@field force? ForceIdentification

---@class LuaGameScript.play_sound
---@field path SoundPath @The sound to play.
---@field position? MapPosition @Where the sound should be played. If not given, it's played at the current position of each player.
---@field volume_modifier? double @The volume of the sound to play. Must be between 0 and 1 inclusive.
---@field override_sound_type? SoundType @The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.

---@class LuaGameScript.set_game_state
---@field game_finished boolean
---@field player_won boolean
---@field next_level string
---@field can_continue boolean
---@field victorious_force ForceIdentification

---@class LuaGameScript.show_message_dialog
---@field text LocalisedString @What the dialog should say
---@field image? string @Path to an image to show on the dialog
---@field point_to? GuiArrowSpecification @If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position. (Use `point_to={type="nowhere"}` to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.
---@field style? string @The gui style to use for this speech bubble. Must be of type speech_bubble.
---@field wrapper_frame_style? string @Must be of type flow_style.

---@class LuaGameScript.take_screenshot
---@field player? PlayerIdentification @The player to focus on. Defaults to the local player.
---@field by_player? PlayerIdentification @If defined, the screenshot will only be taken for this player.
---@field surface? SurfaceIdentification @If defined, the screenshot will be taken on this surface.
---@field position? MapPosition @If defined, the screenshot will be centered on this position. Otherwise, the screenshot will center on `player`.
---@field resolution? TilePosition @The maximum allowed resolution is 16384x16384 (8192x8192 when `anti_alias` is `true`), but the maximum recommended resolution is 4096x4096 (resp. 2048x2048).
---@field zoom? double @The map zoom to take the screenshot at. Defaults to `1`.
---@field path? string @The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `"save/here/screenshot.png"`) will create the necessary folder structure in `script-output`. Defaults to `"screenshot.png"`.
---@field show_gui? boolean @Whether to include GUIs in the screenshot or not. Defaults to `false`.
---@field show_entity_info? boolean @Whether to include entity info ("Alt mode") or not. Defaults to `false`.
---@field show_cursor_building_preview? boolean @When `true` and when `player` is specified, the building preview for the item in the player's cursor will also be rendered. Defaults to `false`.
---@field anti_alias? boolean @Whether to render in double resolution and downscale the result (including GUI). Defaults to `false`.
---@field quality? int @The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.
---@field allow_in_replay? boolean @Whether to save the screenshot even during replay playback. Defaults to `false`.
---@field daytime? double @Overrides the current surface daytime for the duration of screenshot rendering.
---@field water_tick? uint @Overrides the tick of water animation, if animated water is enabled.
---@field force_render? boolean @Screenshot requests are processed in between game update and render. The game may skip rendering (ie. drop frames) if the previous frame has not finished rendering or the game simulation starts to fall below 60 updates per second. If `force_render` is set to `true`, the game won't drop frames and process the screenshot request at the end of the update in which the request was created. This is not honored on multiplayer clients that are catching up to server. Defaults to `false`.

---@class LuaGameScript.take_technology_screenshot
---@field force? ForceIdentification @The force whose technology to screenshot. If not given, the `"player`" force is used.
---@field path? string @The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `"save/here/screenshot.png"`) will create the necessary folder structure in `script-output`. Defaults to `"technology-screenshot.png"`.
---@field by_player? PlayerIdentification @If given, the screenshot will only be taken for this player.
---@field selected_technology? TechnologyIdentification @The technology to highlight.
---@field skip_disabled? boolean @If `true`, disabled technologies will be skipped. Their successors will be attached to the disabled technology's parents. Defaults to `false`.
---@field quality? int @The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.

---An abstract base class for behaviors that support switching the entity on or off based on some condition.
---@class LuaGenericOnOffControlBehavior:LuaControlBehavior
---The circuit condition.`[RW]`
---
---`condition` may be `nil` in order to clear the circuit condition.
---
---Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain signals. 
---```lua
---a_behavior.circuit_condition = {condition={comparator=">",
---                                           first_signal={type="item", name="rail-chain-signal"},
---                                           constant=4}}
---```
---@field circuit_condition CircuitConditionDefinition
---@field connect_to_logistic_network boolean @`true` if this should connect to the logistic network.`[RW]`
---@field disabled boolean @If the entity is currently disabled because of the control behavior.`[R]`
---The logistic condition.`[RW]`
---
---`condition` may be `nil` in order to clear the logistic condition.
---
---Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than four chain signals. 
---```lua
---a_behavior.logistic_condition = {condition={comparator=">",
---                                            first_signal={type="item", name="rail-chain-signal"},
---                                            constant=4}}
---```
---@field logistic_condition CircuitConditionDefinition
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaGenericOnOffControlBehavior = {}

---All methods and properties that this object supports.
---@return string
function LuaGenericOnOffControlBehavior.help() end

---Item group or subgroup.
---@class LuaGroup
---@field group LuaGroup @The parent group if any; `nil` if none.`[R]`
---@field localised_name LocalisedString @Localised name of the group.`[R]`
---@field name string @`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---The additional order value used in recipe ordering.`[R]`
---
---Can only be used on groups, not on subgroups.
---@field order_in_recipe string
---Subgroups of this group.`[R]`
---
---Can only be used on groups, not on subgroups.
---@field subgroups LuaGroup[]
---@field type string @`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaGroup = {}

---All methods and properties that this object supports.
---@return string
function LuaGroup.help() end

---The root of the GUI. This type houses the root elements, `top`, `left`, `center`, `goal`, and `screen`, to which other elements can be added to be displayed on screen.
---
---Every player can have a different GUI state.
---@class LuaGui
---@field center LuaGuiElement @The center part of the GUI. It is a flow element.`[R]`
---@field children table<string, LuaGuiElement> @The children GUI elements mapped by name <> element.`[R]`
---@field goal LuaGuiElement @The flow used in the objectives window. It is a flow element. The objectives window is only visible when the flow is not empty or the objective text is set.`[R]`
---@field left LuaGuiElement @The left part of the GUI. It is a flow element inside a scroll pane element.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field player LuaPlayer @The player who owns this gui.`[R]`
---@field relative LuaGuiElement @For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element.`[R]`
---@field screen LuaGuiElement @For showing a GUI somewhere on the entire screen. It is an empty-widget element.`[R]`
---@field top LuaGuiElement @The top part of the GUI. It is a flow element inside a scroll pane element.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaGui = {}

---All methods and properties that this object supports.
---@return string
function LuaGui.help() end

---Returns `true` if sprite_path is valid and contains loaded sprite, otherwise `false`. Sprite path of type `file` doesn't validate if file exists.
---
---If you want to avoid needing a LuaGui object, [LuaGameScript::is_valid_sprite_path](LuaGameScript::is_valid_sprite_path) can be used instead.
---@param _sprite_path SpritePath @Path to a image.
---@return boolean
function LuaGui.is_valid_sprite_path(_sprite_path) end

---An element of a custom GUI. This type is used to represent any kind of a GUI element - labels, buttons and frames are all instances of this type. Just like [LuaEntity](LuaEntity), different kinds of elements support different attributes; attempting to access an attribute on an element that doesn't support it (for instance, trying to access the `column_count` of a `textfield`) will result in a runtime error.
---
---The following types of GUI element are supported:
---
---- `"button"`: A clickable element. Relevant event: [on_gui_click](on_gui_click)
---- `"sprite-button"`: A `button` that displays a sprite rather than text. Relevant event: [on_gui_click](on_gui_click)
---- `"checkbox"`: A clickable element with a check mark that can be turned off or on. Relevant event: [on_gui_checked_state_changed](on_gui_checked_state_changed)
---- `"flow"`: An invisible container that lays out its children either horizontally or vertically.
---- `"frame"`: A non-transparent box that contains other elements. It can have a title (set via the `caption` attribute). Just like a `flow`, it lays out its children either horizontally or vertically. Relevant event: [on_gui_location_changed](on_gui_location_changed)
---- `"label"`: A piece of text.
---- `"line"`: A horizontal or vertical separation line.
---- `"progressbar"`: A partially filled bar that can be used to indicate progress.
---- `"table"`: An invisible container that lays out its children in a specific number of columns. The width of each column is determined by the widest element it contains.
---- `"textfield"`: A single-line box the user can type into. Relevant events: [on_gui_text_changed](on_gui_text_changed), [on_gui_confirmed](on_gui_confirmed)
---- `"radiobutton"`: A clickable element that is functionally identical to a `checkbox`, but has a circular appearance. Relevant event: [on_gui_checked_state_changed](on_gui_checked_state_changed)
---- `"sprite"`: An element that shows an image.
---- `"scroll-pane"`: An invisible element that is similar to a `flow`, but has the ability to show and use scroll bars.
---- `"drop-down"`: A drop-down containing strings of text. Relevant event: [on_gui_selection_state_changed](on_gui_selection_state_changed)
---- `"list-box"`: A list of strings, only one of which can be selected at a time. Shows a scroll bar if necessary. Relevant event: [on_gui_selection_state_changed](on_gui_selection_state_changed)
---- `"camera"`: A camera that shows the game at the given position on the given surface. It can visually track an [entity](LuaGuiElement::entity) that is set after the element has been created.
---- `"choose-elem-button"`: A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: [on_gui_elem_changed](on_gui_elem_changed)
---- `"text-box"`: A multi-line `textfield`. Relevant event: [on_gui_text_changed](on_gui_text_changed)
---- `"slider"`: A horizontal number line which can be used to choose a number. Relevant event: [on_gui_value_changed](on_gui_value_changed)
---- `"minimap"`: A minimap preview, similar to the normal player minimap. It can visually track an [entity](LuaGuiElement::entity) that is set after the element has been created.
---- `"entity-preview"`: A preview of an entity. The [entity](LuaGuiElement::entity) has to be set after the element has been created.
---- `"empty-widget"`: An empty element that just exists. The root GUI elements `screen` and `relative` are `empty-widget`s.
---- `"tabbed-pane"`: A collection of `tab`s and their contents. Relevant event: [on_gui_selected_tab_changed](on_gui_selected_tab_changed)
---- `"tab"`: A tab for use in a `tabbed-pane`.
---- `"switch"`: A switch with three possible states. Can have labels attached to either side. Relevant event: [on_gui_switch_state_changed](on_gui_switch_state_changed)
---
---Each GUI element allows access to its children by having them as attributes. Thus, one can use the `parent.child` syntax to refer to children. Lua also supports the `parent["child"]` syntax to refer to the same element. This can be used in cases where the child has a name that isn't a valid Lua identifier.
---
---This will add a label called `greeting` to the top flow. Immediately after, it will change its text to illustrate accessing child elements. 
---```lua
---game.player.gui.top.add{type="label", name="greeting", caption="Hi"}
---game.player.gui.top.greeting.caption = "Hello there!"
---game.player.gui.top["greeting"].caption = "Actually, never mind, I don't like your face"
---```
---\
---This will add a tabbed-pane and 2 tabs with contents. 
---```lua
---local tabbed_pane = game.player.gui.top.add{type="tabbed-pane"}
---local tab1 = tabbed_pane.add{type="tab", caption="Tab 1"}
---local tab2 = tabbed_pane.add{type="tab", caption="Tab 2"}
---local label1 = tabbed_pane.add{type="label", caption="Label 1"}
---local label2 = tabbed_pane.add{type="label", caption="Label 2"}
---tabbed_pane.add_tab(tab1, label1)
---tabbed_pane.add_tab(tab2, label2)
---```
---@class LuaGuiElement
---@field allow_decimal boolean @Whether this textfield (when in numeric mode) allows decimal numbers.`[RW]`
---@field allow_negative boolean @Whether this textfield (when in numeric mode) allows negative numbers.`[RW]`
---Whether the `"none"` state is allowed for this switch.`[RW]`
---
---This can't be set to false if the current switch_state is 'none'.
---@field allow_none_state boolean
---@field anchor GuiAnchor @Sets the anchor for this relative widget. Setting `nil` clears the anchor.`[RW]`
---@field auto_center boolean @Whether this frame auto-centers on window resize when stored in [LuaGui::screen](LuaGui::screen).`[RW]`
---@field badge_text LocalisedString @The text to display after the normal tab text (designed to work with numbers)`[RW]`
---The text displayed on this element. For frames, this is the "heading". For other elements, like buttons or labels, this is the content.`[RW]`
---
---Whilst this attribute may be used on all elements without producing an error, it doesn't make sense for tables and flows as they won't display it.
---@field caption LocalisedString
---@field children LuaGuiElement[] @The child-elements of this GUI element.`[R]`
---@field children_names string[] @Names of all the children of this element. These are the identifiers that can be used to access the child as an attribute of this element.`[R]`
---@field clear_and_focus_on_right_click boolean @Makes it so right-clicking on this textfield clears and focuses it.`[RW]`
---@field clicked_sprite SpritePath @The image to display on this sprite-button when it is clicked.`[RW]`
---@field column_count uint @The number of columns in this table.`[R]`
---@field direction string @Direction of this element's layout. May be either `"horizontal"` or `"vertical"`.`[R]`
---The `frame` that is being moved when dragging this GUI element, or `nil`. This element needs to be a child of the `drag_target` at some level.`[RW]`
---
---Only top-level elements in [LuaGui::screen](LuaGui::screen) can be `drag_target`s.
---
---This creates a frame that contains a dragging handle which can move the frame. 
---```lua
---local frame = player.gui.screen.add{type="frame", direction="vertical"}
---local dragger = frame.add{type="empty-widget", style="draggable_space"}
---dragger.style.size = {128, 24}
---dragger.drag_target = frame
---```
---@field drag_target LuaGuiElement
---@field draw_horizontal_line_after_headers boolean @Whether this table should draw a horizontal grid line below the first table row.`[RW]`
---@field draw_horizontal_lines boolean @Whether this table should draw horizontal grid lines.`[RW]`
---@field draw_vertical_lines boolean @Whether this table should draw vertical grid lines.`[RW]`
---The elem filters of this choose-elem-button, or `nil` if there are no filters. The compatible type of filter is determined by `elem_type`.`[RW]`
---
---Writing to this field does not change or clear the currently selected element.
---
---This will configure a choose-elem-button of type `"entity"` to only show items of type `"furnace"`. 
---```lua
---button.elem_filters = {{filter = "type", type = "furnace"}}
---```
---\
---Then, there are some types of filters that work on a specific kind of attribute. The following will configure a choose-elem-button of type `"entity"` to only show entities that have their `"hidden"` [flags](EntityPrototypeFlags) set. 
---```lua
---button.elem_filters = {{filter = "hidden"}}
---```
---\
---Lastly, these filters can be combined at will, taking care to specify how they should be combined (either `"and"` or `"or"`. The following will filter for any `"entities"` that are `"furnaces"` and that are not `"hidden"`. 
---```lua
---button.elem_filters = {{filter = "type", type = "furnace"}, {filter = "hidden", invert = true, mode = "and"}}
---```
---@field elem_filters PrototypeFilter[]
---@field elem_type string @The elem type of this choose-elem-button.`[R]`
---The elem value of this choose-elem-button or `nil` if there is no value.`[RW]`
---
---The `"signal"` type operates with [SignalID](SignalID), while all other types use strings.
---@field elem_value string|SignalID
---@field enabled boolean @Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked.`[RW]`
---@field entity LuaEntity @The entity associated with this entity-preview, camera, minimap or `nil` if no entity is associated.`[RW]`
---@field force string @The force this minimap is using or `nil` if no force is set.`[RW]`
---@field gui LuaGui @The GUI this element is a child of.`[R]`
---@field horizontal_scroll_policy string @Policy of the horizontal scroll bar. Possible values are `"auto"`, `"never"`, `"always"`, `"auto-and-reserve-space"`, `"dont-show-but-allow-scrolling"`.`[RW]`
---@field hovered_sprite SpritePath @The image to display on this sprite-button when it is hovered.`[RW]`
---@field ignored_by_interaction boolean @Whether this GUI element is ignored by interaction. This makes clicks on this element 'go through' to the GUI element or even the game surface below it.`[RW]`
---@field index uint @The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).`[R]`
---@field is_password boolean @Whether this textfield displays as a password field, which renders all characters as `*`.`[RW]`
---@field items LocalisedString[] @The items in this dropdown or listbox.`[RW]`
---@field left_label_caption LocalisedString @The text shown for the left switch label.`[RW]`
---@field left_label_tooltip LocalisedString @The tooltip shown on the left switch label.`[RW]`
---@field location GuiLocation @The location of this widget when stored in [LuaGui::screen](LuaGui::screen), or `nil` if not set or not in [LuaGui::screen](LuaGui::screen).`[RW]`
---@field locked boolean @Whether this choose-elem-button can be changed by the player.`[RW]`
---@field lose_focus_on_confirm boolean @Whether this textfield loses focus after [defines.events.on_gui_confirmed](defines.events.on_gui_confirmed) is fired.`[RW]`
---@field minimap_player_index uint @The player index this minimap is using.`[RW]`
---@field mouse_button_filter MouseButtonFlags @The mouse button filters for this button or sprite-button.`[RW]`
---The name of this element. `""` if no name was set.`[RW]`
---
---```lua
---game.player.gui.top.greeting.name == "greeting"
---```
---@field name string
---@field number double @The number to be shown in the bottom right corner of this sprite-button. Set this to `nil` to show nothing.`[RW]`
---@field numeric boolean @Whether this textfield is limited to only numberic characters.`[RW]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field parent LuaGuiElement @The direct parent of this element; `nil` if this is a top-level element.`[R]`
---@field player_index uint @Index into [LuaGameScript::players](LuaGameScript::players) specifying the player who owns this element.`[R]`
---@field position MapPosition @The position this camera or minimap is focused on, if any.`[RW]`
---@field read_only boolean @Whether this text-box is read-only. Defaults to `false`.`[RW]`
---@field resize_to_sprite boolean @Whether the image widget should resize according to the sprite in it. Defaults to `true`.`[RW]`
---@field right_label_caption LocalisedString @The text shown for the right switch label.`[RW]`
---@field right_label_tooltip LocalisedString @The tooltip shown on the right switch label.`[RW]`
---@field selectable boolean @Whether the contents of this text-box are selectable. Defaults to `true`.`[RW]`
---@field selected_index uint @The selected index for this dropdown or listbox. Returns `0` if none is selected.`[RW]`
---@field selected_tab_index uint @The selected tab index for this tabbed pane or `nil` if no tab is selected.`[RW]`
---@field show_percent_for_small_numbers boolean @Related to the number to be shown in the bottom right corner of this sprite-button. When set to `true`, numbers that are non-zero and smaller than one are shown as a percentage rather than the value. For example, `0.5` will be shown as `50%` instead.`[RW]`
---@field slider_value double @The value of this slider element.`[RW]`
---@field sprite SpritePath @The image to display on this sprite-button or sprite in the default state.`[RW]`
---@field state boolean @Is this checkbox or radiobutton checked?`[RW]`
---@field style LuaStyle|string @The style of this element. When read, this evaluates to a [LuaStyle](LuaStyle). For writing, it only accepts a string that specifies the textual identifier (prototype name) of the desired style.`[RW]`
---@field surface_index uint @The surface index this camera or minimap is using.`[RW]`
---The switch state (left, none, right) for this switch.`[RW]`
---
---If [LuaGuiElement::allow_none_state](LuaGuiElement::allow_none_state) is false this can't be set to `"none"`.
---@field switch_state string
---@field tabs TabAndContent[] @The tabs and contents being shown in this tabbed-pane.`[R]`
---@field tags Tags @The tags associated with this LuaGuiElement.`[RW]`
---@field text string @The text contained in this textfield or text-box.`[RW]`
---@field tooltip LocalisedString @`[RW]`
---@field type string @The type of this GUI element.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field value double @How much this progress bar is filled. It is a value in the range [0, 1].`[RW]`
---@field vertical_centering boolean @Whether the content of this table should be vertically centered. Overrides [LuaStyle::column_alignments](LuaStyle::column_alignments). Defaults to `true`.`[RW]`
---@field vertical_scroll_policy string @Policy of the vertical scroll bar. Possible values are `"auto"`, `"never"`, `"always"`, `"auto-and-reserve-space"`, `"dont-show-but-allow-scrolling"`.`[RW]`
---@field visible boolean @Sets whether this GUI element is visible or completely hidden, taking no space in the layout.`[RW]`
---@field word_wrap boolean @Whether this text-box will word-wrap automatically. Defaults to `false`.`[RW]`
---@field zoom double @The zoom this camera or minimap is using. This value must be positive.`[RW]`
---@field [number] LuaGuiElement @The indexing operator. Gets children by name.`[R]`
local LuaGuiElement = {}

---Add a new child element to this GuiElement.
---@param _table LuaGuiElement.add
---@return LuaGuiElement @The GUI element that was added.
function LuaGuiElement.add(_table) end

---Inserts a string at the end or at the given index of this dropdown or listbox.
---@param _string LocalisedString @The text to insert.
---@param _index? uint @The index at which to insert the item.
function LuaGuiElement.add_item(_string, _index) end

---Adds the given tab and content widgets to this tabbed pane as a new tab.
---@param _tab LuaGuiElement @The tab to add, must be a GUI element of type "tab".
---@param _content LuaGuiElement @The content to show when this tab is selected. Can be any type of GUI element.
function LuaGuiElement.add_tab(_tab, _content) end

---Moves this GUI element to the "front" so it will draw over other elements.
---
---Only works for elements in [LuaGui::screen](LuaGui::screen)
function LuaGuiElement.bring_to_front() end

---Remove children of this element. Any [LuaGuiElement](LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.
---
---```lua
---game.player.gui.top.clear()
---```
function LuaGuiElement.clear() end

---Removes the items in this dropdown or listbox.
function LuaGuiElement.clear_items() end

---Remove this element, along with its children. Any [LuaGuiElement](LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.
---
---The top-level GUI elements - [LuaGui::top](LuaGui::top), [LuaGui::left](LuaGui::left), [LuaGui::center](LuaGui::center) and [LuaGui::screen](LuaGui::screen) - can't be destroyed.
---
---```lua
---game.player.gui.top.greeting.destroy()
---```
function LuaGuiElement.destroy() end

---Focuses this GUI element if possible.
function LuaGuiElement.focus() end

---Forces this frame to re-auto-center. Only works on frames stored directly in [LuaGui::screen](LuaGui::screen).
function LuaGuiElement.force_auto_center() end

---Gets the index that this element has in its parent element.
---
---This iterates through the children of the parent of this element, meaning this has a non-free cost to get, but is faster than doing the equivalent in Lua.
---@return uint
function LuaGuiElement.get_index_in_parent() end

---Gets the item at the given index from this dropdown or listbox.
---@param _index uint @The index to get
---@return LocalisedString
function LuaGuiElement.get_item(_index) end

---The mod that owns this Gui element or `nil` if it's owned by the scenario script.
---
---This has a not-super-expensive, but non-free cost to get.
---@return string
function LuaGuiElement.get_mod() end

---Returns whether this slider only allows being moved to discrete positions.
---@return boolean
function LuaGuiElement.get_slider_discrete_slider() end

---Returns whether this slider only allows discrete values.
---@return boolean
function LuaGuiElement.get_slider_discrete_values() end

---Gets this sliders maximum value.
---@return double
function LuaGuiElement.get_slider_maximum() end

---Gets this sliders minimum value.
---@return double
function LuaGuiElement.get_slider_minimum() end

---Gets the minimum distance this slider can move.
---@return double
function LuaGuiElement.get_slider_value_step() end

---All methods and properties that this object supports.
---@return string
function LuaGuiElement.help() end

---Removes the item at the given index from this dropdown or listbox.
---@param _index uint @The index
function LuaGuiElement.remove_item(_index) end

---Removes the given tab and its associated content from this tabbed pane.
---
---Removing a tab does not destroy the tab or the tab contents. It just removes them from the view.
---\
---When removing tabs, [LuaGuiElement::selected_tab_index](LuaGuiElement::selected_tab_index) needs to be manually updated.
---@param _tab LuaGuiElement @The tab to remove. If not given, it removes all tabs.
function LuaGuiElement.remove_tab(_tab) end

---Scrolls this scroll bar to the bottom.
function LuaGuiElement.scroll_to_bottom() end

---Scrolls this scroll bar such that the specified GUI element is visible to the player.
---@param _element LuaGuiElement @The element to scroll to.
---@param _scroll_mode? string @Where the element should be positioned in the scroll-pane. Must be either `"in-view"` or `"top-third"`. Defaults to `"in-view"`.
function LuaGuiElement.scroll_to_element(_element, _scroll_mode) end

---Scrolls the scroll bar such that the specified listbox item is visible to the player.
---@param _index int @The item index to scroll to.
---@param _scroll_mode? string @Where the item should be positioned in the list-box. Must be either `"in-view"` or `"top-third"`. Defaults to `"in-view"`.
function LuaGuiElement.scroll_to_item(_index, _scroll_mode) end

---Scrolls this scroll bar to the left.
function LuaGuiElement.scroll_to_left() end

---Scrolls this scroll bar to the right.
function LuaGuiElement.scroll_to_right() end

---Scrolls this scroll bar to the top.
function LuaGuiElement.scroll_to_top() end

---Selects a range of text in this textbox.
---
---Select the characters `amp` from `example`: 
---```lua
---textbox.select(3, 5)
---```
---\
---Move the cursor to the start of the text box: 
---```lua
---textbox.select(1, 0)
---```
---@param _start int @The index of the first character to select
---@param _end int @The index of the last character to select
function LuaGuiElement.select(_start, _end) end

---Selects all the text in this textbox.
function LuaGuiElement.select_all() end

---Sets the given string at the given index in this dropdown or listbox.
---@param _index uint @The index whose text to replace.
---@param _string LocalisedString @The text to set at the given index.
function LuaGuiElement.set_item(_index, _string) end

---Sets whether this slider only allows being moved to discrete positions.
---@param _value boolean
function LuaGuiElement.set_slider_discrete_slider(_value) end

---Sets whether this slider only allows discrete values.
---@param _value boolean
function LuaGuiElement.set_slider_discrete_values(_value) end

---Sets this sliders minimum and maximum values.
---
---The minimum can't be >= the maximum.
---@param _minimum double
---@param _maximum double
function LuaGuiElement.set_slider_minimum_maximum(_minimum, _maximum) end

---Sets the minimum distance this slider can move.
---
---The minimum distance can't be > (max - min).
---@param _value double
function LuaGuiElement.set_slider_value_step(_value) end

---Swaps the children at the given indices in this element.
---@param _index_1 uint @The index of the first child.
---@param _index_2 uint @The index of the second child.
function LuaGuiElement.swap_children(_index_1, _index_2) end


---@class LuaGuiElement.add
---@field type string @The kind of element to add. Has to be one of the GUI element types listed at the top of this page.
---@field name? string @Name of the child element. It must be unique within the parent element.
---@field caption? LocalisedString @Text displayed on the child element. For frames, this is their title. For other elements, like buttons or labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.
---@field tooltip? LocalisedString @Tooltip of the child element.
---@field enabled? boolean @Whether the child element is enabled. Defaults to `true`.
---@field visible? boolean @Whether the child element is visible. Defaults to `true`.
---@field ignored_by_interaction? boolean @Whether the child element is ignored by interaction. Defaults to `false`.
---@field style? string @Style of the child element.
---@field tags? Tags @[Tags](Tags) associated with the child element.
---@field index? uint @Location in its parent that the child element should slot into. By default, the child will be appended onto the end.
---@field anchor? GuiAnchor @Where to position the child element when in the `relative` element.

---Prototype of a heat buffer.
---@class LuaHeatBufferPrototype
---@field connections HeatConnection[] @`[R]`
---@field default_temperature double @`[R]`
---@field max_temperature double @`[R]`
---@field max_transfer double @`[R]`
---@field min_temperature_gradient double @`[R]`
---@field min_working_temperature double @`[R]`
---@field minimum_glow_temperature double @`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field specific_heat double @`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaHeatBufferPrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaHeatBufferPrototype.help() end

---Prototype of a heat energy source.
---@class LuaHeatEnergySourcePrototype
---@field connections HeatConnection[] @`[R]`
---@field default_temperature double @`[R]`
---@field emissions double @`[R]`
---@field heat_buffer_prototype LuaHeatBufferPrototype @`[R]`
---@field max_temperature double @`[R]`
---@field max_transfer double @`[R]`
---@field min_temperature_gradient double @`[R]`
---@field min_working_temperature double @`[R]`
---@field minimum_glow_temperature double @`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field render_no_network_icon boolean @`[R]`
---@field render_no_power_icon boolean @`[R]`
---@field specific_heat double @`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaHeatEnergySourcePrototype = {}

---All methods and properties that this object supports.
---@return string
function LuaHeatEnergySourcePrototype.help() end

---Control behavior for inserters.
---@class LuaInserterControlBehavior:LuaGenericOnOffControlBehavior
---@field circuit_hand_read_mode defines.control_behavior.inserter.hand_read_mode @The hand read mode for the inserter.`[RW]`
---@field circuit_mode_of_operation defines.control_behavior.inserter.circuit_mode_of_operation @The circuit mode of operations for the inserter.`[RW]`
---@field circuit_read_hand_contents boolean @`true` if the contents of the inserter hand should be sent to the circuit network`[RW]`
---@field circuit_set_stack_size boolean @If the stack size of the inserter is set through the circuit network or not.`[RW]`
---@field circuit_stack_control_signal SignalID @The signal used to set the stack size of the inserter.`[RW]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
local LuaInserterControlBehavior = {}

---All methods and properties that this object supports.
---@return string
function LuaInserterControlBehavior.help() end

---A storage of item stacks.
---@class LuaInventory
---@field entity_owner LuaEntity @The entity that owns this inventory or `nil` if this isn't owned by an entity.`[R]`
---@field equipment_owner LuaEquipment @The equipment that owns this inventory or `nil` if this isn't owned by an equipment.`[R]`
---@field index defines.inventory @The inventory index this inventory uses, or `nil` if the inventory doesn't have an index.`[R]`
---@field mod_owner string @The mod that owns this inventory or `nil` if this isn't owned by a mod.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field player_owner LuaPlayer @The player that owns this inventory or `nil` if this isn't owned by a player.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---The indexing operator.`[R]`
---
---Will get the first item in the player's inventory. 
---```lua
---game.player.get_main_inventory()[1]
---```
---@field [number] LuaItemStack
local LuaInventory = {}

---Can at least some items be inserted?
---@param _items ItemStackIdentification @Items that would be inserted.
---@return boolean @`true` if at least a part of the given items could be inserted into this inventory.
function LuaInventory.can_insert(_items) end

---If the given inventory slot filter can be set to the given filter.
---@param _index uint @The item stack index
---@param _filter string @The item name of the filter
---@return boolean
function LuaInventory.can_set_filter(_index, _filter) end

---Make this inventory empty.
function LuaInventory.clear() end

---Counts the number of empty stacks.
---@param _include_filtered? boolean @If true, filtered slots will be included. Defaults to false.
---@return uint
function LuaInventory.count_empty_stacks(_include_filtered) end

---Destroys this inventory.
---
---Only inventories created by [LuaGameScript::create_inventory](LuaGameScript::create_inventory) can be destroyed this way.
function LuaInventory.destroy() end

---Finds the first empty stack. Filtered slots are excluded unless a filter item is given.
---@param _item? string @If given, empty stacks that are filtered for this item will be included.
---@return LuaItemStack @The first empty stack, or `nil` if there aren't any empty stacks.
---@return uint @The stack index of the matching stack, if any is found.
function LuaInventory.find_empty_stack(_item) end

---Gets the first LuaItemStack in the inventory that matches the given item name.
---@param _item string @The item name to find
---@return LuaItemStack @The first matching stack, or `nil` if none match.
---@return uint @The stack index of the matching stack, if any is found.
function LuaInventory.find_item_stack(_item) end

---Get the current bar. This is the index at which the red area starts.
---
---Only useable if this inventory supports having a bar.
---@return uint
function LuaInventory.get_bar() end

---Get counts of all items in this inventory.
---@return table<string, uint> @The counts, indexed by item names.
function LuaInventory.get_contents() end

---Gets the filter for the given item stack index.
---@param _index uint @The item stack index
---@return string @The current filter or `nil` if none.
function LuaInventory.get_filter(_index) end

---Gets the number of the given item that can be inserted into this inventory.
---
---This is a "best guess" number; things like assembling machine filtered slots, module slots, items with durability, and items with mixed health will cause the result to be inaccurate.
---\
---The main use for this is in checking how many of a basic item can fit into a basic inventory.
---\
---This accounts for the 'bar' on the inventory.
---@param _item string @The item to check.
function LuaInventory.get_insertable_count(_item) end

---Get the number of all or some items in this inventory.
---@param _item? string @Prototype name of the item to count. If not specified, count all items.
---@return uint
function LuaInventory.get_item_count(_item) end

---All methods and properties that this object supports.
---@return string
function LuaInventory.help() end

---Insert items into this inventory.
---@param _items ItemStackIdentification @Items to insert.
---@return uint @Number of items actually inserted.
function LuaInventory.insert(_items) end

---Does this inventory contain nothing?
---@return boolean
function LuaInventory.is_empty() end

---If this inventory supports filters and has at least 1 filter set.
---@return boolean
function LuaInventory.is_filtered() end

---Remove items from this inventory.
---@param _items ItemStackIdentification @Items to remove.
---@return uint @Number of items actually removed.
function LuaInventory.remove(_items) end

---Resizes the inventory.
---
---Items in slots beyond the new capacity are deleted.
---\
---Only inventories created by [LuaGameScript::create_inventory](LuaGameScript::create_inventory) can be resized.
---@param _size uint16 @New size of a inventory
function LuaInventory.resize(_size) end

---Set the current bar.
---
---Only useable if this inventory supports having a bar.
---@param _bar? uint @The new limit. Omitting this parameter will clear the limit.
function LuaInventory.set_bar(_bar) end

---Sets the filter for the given item stack index.
---
---Some inventory slots don't allow some filters (gun ammo can't be filtered for non-ammo).
---@param _index uint @The item stack index
---@param _filter string @The new filter or nil to erase the filter
---@return boolean @If the filter was allowed to be set.
function LuaInventory.set_filter(_index, _filter) end

---Sorts and merges the items in this inventory.
function LuaInventory.sort_and_merge() end

---Does this inventory support a bar? Bar is the draggable red thing, found for example on chests, that limits the portion of the inventory that may be manipulated by machines.
---
---"Supporting a bar" doesn't mean that the bar is set to some nontrivial value. Supporting a bar means the inventory supports having this limit at all. The character's inventory is an example of an inventory without a bar; the wooden chest's inventory is an example of one with a bar.
---@return boolean
function LuaInventory.supports_bar() end

---If this inventory supports filters.
---@return boolean
function LuaInventory.supports_filters() end

---Prototype of an item.
---
---```lua
---game.item_prototypes["iron-plate"]
---```
---@class LuaItemPrototype
---@field alt_entity_filter_mode string @The alt entity filter mode used by this selection tool.`[R]`
---@field alt_entity_filters table<string, LuaEntityPrototype> @The alt entity filters used by this selection tool indexed by entity name.`[R]`
---The alt entity type filters used by this selection tool indexed by entity type.`[R]`
---
---The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.
---@field alt_entity_type_filters table<string, boolean>
---@field alt_selection_border_color Color @The color used when doing alt selection with this selection tool prototype.`[R]`
---@field alt_selection_cursor_box_type string @`[R]`
---@field alt_selection_mode_flags SelectionModeFlags @Flags that affect which entities will be selected during alternate selection.`[R]`
---@field alt_tile_filter_mode string @The alt tile filter mode used by this selection tool.`[R]`
---@field alt_tile_filters table<string, LuaTilePrototype> @The alt tile filters used by this selection tool indexed by tile name.`[R]`
---@field always_include_tiles boolean @If tiles area always included when doing selection with this selection tool prototype.`[R]`
---@field attack_parameters AttackParameters @The gun attack parameters or `nil` if not a gun item prototype.`[R]`
---@field burnt_result LuaItemPrototype @The result of burning this item as fuel or `nil`.`[R]`
---@field can_be_mod_opened boolean @If this item can be mod-opened.`[R]`
---@field capsule_action CapsuleAction @The capsule action for this capsule item prototype or `nil` if this isn't a capsule item prototype.`[R]`
---@field category string @The name of a [LuaModuleCategoryPrototype](LuaModuleCategoryPrototype). Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules.`[R]`
---@field curved_rail LuaEntityPrototype @The curved rail prototype used for this rail planner prototype, or `nil` if this isn't a rail planner prototype.`[R]`
---@field default_label_color Color @The default label color used for this item with label. `nil` if not defined or if this isn't an item with label.`[R]`
---@field default_request_amount uint @The default request value.`[R]`
---@field draw_label_for_cursor_render boolean @If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.`[R]`
---@field durability double @The durability of this tool item or `nil` if not a tool item.`[R]`
---@field durability_description_key string @The durability message key used when displaying the durability of this tool.`[R]`
---@field entity_filter_mode string @The entity filter mode used by this selection tool.`[R]`
---@field entity_filter_slots uint @The number of entity filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype.`[R]`
---@field entity_filters table<string, LuaEntityPrototype> @The entity filters used by this selection tool indexed by entity name.`[R]`
---The entity type filters used by this selection tool indexed by entity type.`[R]`
---
---The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.
---@field entity_type_filters table<string, boolean>
---@field equipment_grid LuaEquipmentGridPrototype @The prototype of this armor equipment grid or `nil` if none or this is not an armor item.`[R]`
---@field extend_inventory_by_default boolean @If this item with inventory extends the inventory it resides in by default.`[R]`
---@field filter_mode string @The filter mode used by this item with inventory.`[R]`
---@field flags ItemPrototypeFlags @The flags for this item prototype.`[R]`
---@field fuel_acceleration_multiplier double @The acceleration multiplier when this item is used as fuel in a vehicle.`[R]`
---@field fuel_category string @The fuel category or `nil`.`[R]`
---@field fuel_emissions_multiplier double @The emissions multiplier if this is used as fuel.`[R]`
---@field fuel_top_speed_multiplier double @The fuel top speed multiplier when this item is used as fuel in a vehicle.`[R]`
---@field fuel_value float @Fuel value when burned.`[R]`
---@field group LuaGroup @The group this prototype belongs to.`[R]`
---@field infinite boolean @If this tool item has infinite durability. `nil` if not a tool type item.`[R]`
---@field insertion_priority_mode string @The insertion priority mode used by this item with inventory.`[R]`
---@field inventory_size uint @The main inventory size for item-with-inventory-prototype. `nil` if not an item-with-inventory-prototype.`[R]`
---@field inventory_size_bonus uint @The inventory size bonus for this armor prototype. `nil` if this isn't an armor prototype.`[R]`
---@field item_filters table<string, LuaItemPrototype> @`[R]`
---@field item_group_filters table<string, LuaGroup> @`[R]`
---@field item_subgroup_filters table<string, LuaGroup> @`[R]`
---@field limitation_message_key string @The limitation message key used when the player attempts to use this modules in some place it's not allowed.`[R]`
---@field limitations string[] @An array of recipe names this module is allowed to work with. Empty when all recipes are allowed.`[R]`
---@field localised_description LocalisedString @`[R]`
---@field localised_filter_message LocalisedString @The localised string used when the player attempts to put items into this item with inventory that aren't allowed.`[R]`
---@field localised_name LocalisedString @`[R]`
---@field magazine_size float @Size of full magazine; `nil` if this is not an ammo item.`[R]`
---@field mapper_count uint @How many filters an upgrade item has. `nil` if not a upgrade item.`[R]`
---@field module_effects ModuleEffects @Effects of this module.`[R]`
---@field name string @Name of this prototype.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field order string @The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.`[R]`
---@field place_as_equipment_result LuaEquipmentPrototype @Prototype of the equipment that will be created by placing this item in an equipment grid or `nil` if there is no equipment defined.`[R]`
---@field place_as_tile_result PlaceAsTileResult @The place-as-tile result if one is defined, else `nil`.`[R]`
---@field place_result LuaEntityPrototype @Prototype of the entity that will be created by placing this item, or `nil` if there is no such entity.`[R]`
---@field reload_time float @Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or `nil` if this is not an ammo item.`[R]`
---@field repair_result TriggerItem[] @The repair result of this repair tool prototype or `nil` if this isn't a repair tool prototype.`[R]`
---@field resistances table<string, Resistance> @Resistances of this armour item, indexed by damage type name. `nil` if not an armor or the armor has no resistances.`[R]`
---@field reverse_alt_entity_filter_mode string @The reverse entity filter mode used by this selection tool.`[R]`
---@field reverse_entity_filters table<string, LuaEntityPrototype> @The reverse entity filters used by this selection tool indexed by entity name.`[R]`
---The reverse entity type filters used by this selection tool indexed by entity type.`[R]`
---
---The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.
---@field reverse_entity_type_filters table<string, boolean>
---@field reverse_selection_border_color Color @The color used when doing reverse selection with this selection tool prototype.`[R]`
---@field reverse_selection_cursor_box_type string @`[R]`
---@field reverse_selection_mode_flags SelectionModeFlags @Flags that affect which entities will be selected during reverse selection.`[R]`
---@field reverse_tile_filter_mode string @The reverse tile filter mode used by this selection tool.`[R]`
---@field reverse_tile_filters table<string, LuaTilePrototype> @The reverse tile filters used by this selection tool indexed by tile name.`[R]`
---@field rocket_launch_products Product[] @The results from launching this item in a rocket.`[R]`
---@field selection_border_color Color @The color used when doing normal selection with this selection tool prototype.`[R]`
---@field selection_cursor_box_type string @`[R]`
---@field selection_mode_flags SelectionModeFlags @Flags that affect which entities will be selected.`[R]`
---@field speed float @The repairing speed if this is a repairing tool; otherwise `nil`.`[R]`
---@field stack_size uint @Maximum stack size of the item specified by this prototype.`[R]`
---@field stackable boolean @Is this item allowed to stack at all?`[R]`
---@field straight_rail LuaEntityPrototype @The straight rail prototype used for this rail planner prototype, or `nil` if this isn't a rail planner prototype.`[R]`
---@field subgroup LuaGroup @The subgroup this prototype belongs to.`[R]`
---@field tier uint @Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category.`[R]`
---@field tile_filter_mode string @The tile filter mode used by this selection tool.`[R]`
---@field tile_filter_slots uint @The number of tile filters this deconstruction item has or `nil` if this isn't a deconstruction item prototype.`[R]`
---@field tile_filters table<string, LuaTilePrototype> @The tile filters used by this selection tool indexed by tile name.`[R]`
---@field type string @Type of this prototype. E.g. `"gun"` or `"mining-tool"`.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field wire_count uint @The number of items needed to connect 2 entities with this as wire.`[R]`
local LuaItemPrototype = {}

---Type of this ammo prototype or `nil` if this is not an ammo prototype.
---@param _ammo_source_type? string @"default", "player", "turret", or "vehicle"
---@return AmmoType
function LuaItemPrototype.get_ammo_type(_ammo_source_type) end

---Does this prototype have a flag enabled?
---@param _flag string @The flag to check. Can be one of [ItemPrototypeFlags](ItemPrototypeFlags). Any other value will cause an error.
---@return boolean
function LuaItemPrototype.has_flag(_flag) end

---All methods and properties that this object supports.
---@return string
function LuaItemPrototype.help() end

