[abs]
description = '返回 `x` 的绝对值。'

[acos]
description = '返回 `x` 的反余弦值（用弧度表示）。'

[asin]
description = '返回 `x` 的反正弦值（用弧度表示）。'

["atan Lua 5.1"]
description = '返回 `x` 的反正切值（用弧度表示）。'

["atan Lua 5.3"]
description = '返回 `y/x` 的反正切值（用弧度表示）。'

[atan2]
description = '返回 `y/x` 的反正切值（用弧度表示）。'

[ceil]
description = '返回不小于 `x` 的最小整数值。'

[cos]
description = '返回 `x` 的余弦（假定参数是弧度）。'

[cosh]
description = '返回 `x` 的双曲余弦（假定参数是弧度）。'

[deg]
description = '将角 `x` 从弧度转换为角度。'

[exp]
description = '返回 `e^x` 的值 （e 为自然对数的底）。'

[floor]
description = '返回不大于 `x` 的最大整数值。'

[fmod]
description = '返回 `x` 除以 `y`，将商向零圆整后的余数。'

[frexp]
description = '将 `x` 分解为尾数与指数，返回值符合 `x = m * (2 ^ e)` 。`e` 是一个整数，`m` 是 [0.5, 1) 之间的规格化小数 (`x` 为0时 `m` 为0)。'

[huge]
description = '一个比任何数字值都大的浮点数。'

[ldexp]
description = '返回 `m * (2 ^ e)` 。'

[log]
description = '返回以指定底的 `x` 的对数。'

['log Lua 5.1']
description = '返回 `x` 的自然对数。'

[log10]
description = '返回 `x` 的以10为底的对数。'

[max]
description = '返回参数中最大的值， 大小由 Lua 操作 `<` 决定。'

[maxinteger]
description = '最大值的整数。'

[min]
description = '返回参数中最小的值， 大小由 Lua 操作 `<` 决定。'

[mininteger]
description = '最小值的整数。'

[modf]
description = '返回 `x` 的整数部分和小数部分。'

[pi]
description = '*π* 的值。'

[pow]
description = '返回 `x ^ y` 。'

[rad]
description = '将角 `x` 从角度转换为弧度。'

[random]
description = [[
* `math.random()`: 返回 [0,1) 区间内一致分布的浮点伪随机数。
* `math.random(n)`: 返回 [1, n] 区间内一致分布的整数伪随机数。
* `math.random(m, n)`: 返回 [m, n] 区间内一致分布的整数伪随机数。
]]

[randomseed]
description = '把 `x` 设为伪随机数发生器的“种子”： 相同的种子产生相同的随机数列。'

["randomseed Lua 5.4"]
description = [[
* `math.randomseed(x, y)`: 将 `x` 与 `y` 连接为128位的种子来重新初始化伪随机生成器。
* `math.randomseed(x)`: 等同于 `math.randomseed(x, 0)` 。
* `math.randomseed()`: Generates a seed with a weak attempt for randomness.（不会翻）
]]

[sin]
description = '返回 `x` 的正弦值（假定参数是弧度）。'

[sinh]
description = '返回 `x` 的双曲正弦值（假定参数是弧度）。'

[sqrt]
description = '返回 `x` 的平方根。'

[tan]
description = '返回 `x` 的正切值（假定参数是弧度）。'

[tanh]
description = '返回 `x` 的双曲正切值（假定参数是弧度）。'

[tointeger]
description = '如果 `x` 可以转换为一个整数， 返回该整数。'

[type]
[[.enums]]
name = 'type'
enum = '"integer"'
description = '`x` 是一个整数。'
``````````
name = 'type'
enum = '"float"'
description = '`x` 是一个浮点数。'
``````````
name = 'type'
code = 'nil'
description = '`x` 不是一个数字。'

[ult]
description = '如果整数 `m` 和 `n` 以无符号整数形式比较， `m` 在 `n` 之下，返回布尔真否则返回假。'
