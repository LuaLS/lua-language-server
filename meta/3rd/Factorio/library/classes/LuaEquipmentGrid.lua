---@meta

---An equipment grid is for example the inside of a power armor.
---@class LuaEquipmentGrid
---@field available_in_batteries double @The total energy stored in all batteries in the equipment grid.`[R]`
---@field battery_capacity double @Total energy storage capacity of all batteries in the equipment grid.`[R]`
---@field equipment LuaEquipment[] @All the equipment in this grid.`[R]`
---@field generator_energy double @Total energy per tick generated by the equipment inside this grid.`[R]`
---@field height uint @Height of the equipment grid.`[R]`
---@field inhibit_movement_bonus boolean @True if this movement bonus equipment is turned off, otherwise false.`[RW]`
---@field max_shield float @The maximum amount of shields this equipment grid has.`[R]`
---@field max_solar_energy double @Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated energy varies depending on the daylight levels.`[R]`
---@field object_name string @The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.`[R]`
---@field prototype LuaEquipmentGridPrototype @`[R]`
---@field shield float @The amount of shields this equipment grid has.`[R]`
---@field valid boolean @Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.`[R]`
---@field width uint @Width of the equipment grid.`[R]`
local LuaEquipmentGrid = {}

---Check whether moving an equipment would succeed.
---@param _table LuaEquipmentGrid.can_move
---@return boolean
function LuaEquipmentGrid.can_move(_table) end

---Clear all equipment from the grid, removing it without actually returning it.
---@param _by_player? PlayerIdentification @If provided, the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.
function LuaEquipmentGrid.clear(_by_player) end

---Find equipment in the Equipment Grid based off a position.
---@param _position EquipmentPosition @The position
---@return LuaEquipment @The found equipment, or `nil` if equipment could not be found at the given position.
function LuaEquipmentGrid.get(_position) end

---Get counts of all equipment in this grid.
---@return table<string, uint> @The counts, indexed by equipment names.
function LuaEquipmentGrid.get_contents() end

---All methods and properties that this object supports.
---@return string
function LuaEquipmentGrid.help() end

---Move an equipment within this grid.
---@param _table LuaEquipmentGrid.move
---@return boolean @`true` if the equipment was successfully moved.
function LuaEquipmentGrid.move(_table) end

---Insert an equipment into the grid.
---@param _table LuaEquipmentGrid.put
---@return LuaEquipment @The newly-added equipment, or `nil` if the equipment could not be added.
function LuaEquipmentGrid.put(_table) end

---Remove an equipment from the grid.
---@param _table LuaEquipmentGrid.take
---@return SimpleItemStack @The removed equipment, or `nil` if no equipment was removed.
function LuaEquipmentGrid.take(_table) end

---Remove all equipment from the grid.
---@param _by_player? PlayerIdentification @If provided, the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.
---@return table<string, uint> @Count of each removed equipment, indexed by their prototype names.
function LuaEquipmentGrid.take_all(_by_player) end


---@class LuaEquipmentGrid.can_move
---@field equipment LuaEquipment @The equipment to move
---@field position EquipmentPosition @Where to put it

---@class LuaEquipmentGrid.move
---@field equipment LuaEquipment @The equipment to move
---@field position EquipmentPosition @Where to put it

---@class LuaEquipmentGrid.put
---@field name string @Equipment prototype name
---@field position? EquipmentPosition @Grid position to put the equipment in.
---@field by_player? PlayerIdentification @If provided the action is done 'as' this player and [on_player_placed_equipment](on_player_placed_equipment) is triggered.

---@class LuaEquipmentGrid.take
---@field position? EquipmentPosition @Take the equipment that contains this position in the grid.
---@field equipment? LuaEquipment @Take this exact equipment.
---@field by_player? PlayerIdentification @If provided the action is done 'as' this player and [on_player_removed_equipment](on_player_removed_equipment) is triggered.

