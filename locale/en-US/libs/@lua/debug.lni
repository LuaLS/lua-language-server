["debug.debug"]
description = 'Enters an interactive mode with the user, running each string that the user enters.'

[getfenv]
description = 'Returns the environment of object `o` .'

[gethook]
description = 'Returns the current hook settings of the thread.'

[getinfo]
description = 'Returns a table with information about a function.'
[[.enums]]
name = 'what'
enum = '"n"'
description = '`name` and `namewhat`'
``````````
name = 'what'
enum = '"S"'
description = '`source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`'
``````````
name = 'what'
enum = '"l"'
description = '`currentline`'
``````````
name = 'what'
enum = '"t"'
description = '`istailcall`'
``````````
name = 'what'
enum = '"u"'
description = '`nups`, `nparams`, and `isvararg`'
``````````
name = 'what'
enum = '"f"'
description = '`func`'
``````````
name = 'what'
enum = '"L"'
description = '`activelines`'

['getinfo Lua 5.1']
description = 'Returns a table with information about a function.'
[[.enums]]
name = 'what'
enum = '"n"'
description = '`name` and `namewhat`'
``````````
name = 'what'
enum = '"S"'
description = '`source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`'
``````````
name = 'what'
enum = '"l"'
description = '`currentline`'
``````````
name = 'what'
enum = '"t"'
description = '`istailcall`'
``````````
name = 'what'
enum = '"u"'
description = '`nups`'
``````````
name = 'what'
enum = '"f"'
description = '`func`'
``````````
name = 'what'
enum = '"L"'
description = '`activelines`'

[getlocal]
description = 'Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.'

['getlocal Lua 5.1']
description = 'Returns the name and the value of the local variable with index `local` of the function at level `level` of the stack.'

[getmetatable]
description = 'Returns the metatable of the given value.'

[getregistry]
description = 'Returns the registry table.'

[getupvalue]
description = 'Returns the name and the value of the upvalue with index `up` of the function.'

[getuservalue]
description = 'Returns the Lua value associated to u.'

["getuservalue Lua 5.4"]
description = [[
Returns the `n`-th user value associated
to the userdata `u` plus a boolean,
`false` if the userdata does not have that value.
]]

[setcstacklimit]
description = [[
Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.

In case of success, this function returns the old limit. In case of error, it returns `false`.
]]

[setfenv]
description = 'Sets the environment of the given `object` to the given `table` .'

[sethook]
description = 'Sets the given function as a hook.'
[[.enums]]
name = 'mask'
enum = '"c"'
description = 'Calls hook when Lua calls a function.'
``````````
name = 'mask'
enum = '"r"'
description = 'Calls hook when Lua returns from a function.'
``````````
name = 'mask'
enum = '"l"'
description = 'Calls hook when Lua enters a new line of code.'

[setlocal]
description = 'Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.'

[setmetatable]
description = 'Sets the metatable for the given value to the given table (which can be nil).'

[setupvalue]
description = 'Assigns the `value` to the upvalue with index `up` of the function.'

[setuservalue]
description = 'Sets the given value as the Lua value associated to the given udata.'

["setuservalue Lua 5.4"]
description = [[
Sets the given `value` as
the `n`-th user value associated to the given `udata`.
`udata` must be a full userdata.
]]

[traceback]
description = 'Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.'

[upvalueid]
description = 'Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.'

[upvaluejoin]
description = 'Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.'
